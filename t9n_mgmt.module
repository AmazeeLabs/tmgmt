<?php

/**
 * Implements hook_entity_info().
 */
function t9n_mgmt_entity_info() {
  return array(
    't9n_mgmt_map' => array(
      'label' => t('Translation Management Map'),
      'module' => 't9n_mgmt',
      'controller class' => 'TranslationManagementMapController',
      'entity class' => 'TranslationManagementMap',
      'base table' => 't9n_mgmt_map',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tmid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    't9n_mgmt_job' => array(
      'label' => t('Translation Management Job'),
      'module' => 't9n_mgmt',
      'controller class' => 'TranslationManagementJobController',
      'entity class' => 'TranslationManagementJob',
      'base table' => 't9n_mgmt_job',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tjid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    't9n_mgmt_translator' => array(
      'label' => t('Translation Management Translator'),
      'module' => 't9n_mgmt',
      'controller class' => 'TranslationManagementTranslatorController',
      'entity class' => 'TranslationManagementTranslator',
      'base table' => 't9n_mgmt_translator',
      'exportable' => TRUE,
      'entity cache' => TRUE,
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tid',
        'name' => 'name',
        'label' => 'label',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Loads a translation map.
 */
function t9n_mgmt_map_load($tmid, $reset = FALSE) {
  $maps = t9n_mgmt_map_load_multiple(array($tmid), array(), $reset);
  return $maps ? reset($maps) : FALSE;
}

/**
 * Loads translation maps.
 */
function t9n_mgmt_map_load_multiple(array $tmids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('t9n_mgmt_map', $tmids, $conditions, $reset);
}

/**
 * Loads a translation job.
 */
function t9n_mgmt_job_load($tjid, $reset = FALSE) {
  $jobs = t9n_mgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function t9n_mgmt_job_load_multiple(array $tjids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('t9n_mgmt_job', $tjids, $conditions, $reset);
}

/**
 * Loads a translator.
 */
function t9n_mgmt_translator_load($tid, $reset = FALSE) {
  $translators = t9n_mgmt_translator_load_multiple(array($tid), array(), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function t9n_mgmt_translator_load_multiple(array $tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('t9n_mgmt_translator', $tids, $conditions, $reset);
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 */
function t9n_mgmt_service_plugin_info($plugin = NULL) {
  return _t9n_mgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TranslationManagementServicePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function t9n_mgmt_service_plugin_controller($plugin) {
  return _t9n_mgmt_plugin_controler('source', $plugin);
}

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function t9n_mgmt_source_plugin_info($plugin = NULL) {
  return _t9n_mgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TranslationManagementSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function t9n_mgmt_source_plugin_controller($plugin) {
  return _t9n_mgmt_plugin_controler('source', $plugin);
}

/**
 * Discovers all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function _t9n_mgmt_plugin_info($type, $plugin = NULL) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('t9n_mgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 't9n_mgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('t9n_mgmt_' . $type . '_plugin_info', $info);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  else if (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TranslationManagementSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function _t9n_mgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = t9n_mgmt_plugin_info($type, $plugin);
    $class = isset($info['controller class']) ? $info['controller class'] : 'TranslationManagementDefault' . ucfirst($type) . 'PluginController';
    $cache[$type][$plugin] = new $class($plugin);
  }
  return $cache[$type][$plugin];
}
