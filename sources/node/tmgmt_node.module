<?php

/**
 * @file
 * Source plugin for the Translation Management system that handles nodes.
 */

/**
 * Implements hook_tmgmt_source_plugin_info().
 */
function tmgmt_node_tmgmt_source_plugin_info() {
  $info['node'] = array(
    'label' => t('Node'),
    'description' => t('Source handler for nodes.'),
    'controller class' => 'TMGMTNodeSourcePluginController',
    'item types' => array(),
  );
  foreach (node_type_get_names() as $type => $name) {
    if (translation_supported_type($type)) {
      $info['node']['item types'][$type] = $name;
    }
  }
  return $info;
}

/**
 * Updates a node translation.
 *
 * @param object $node
 *   The translated node object (the target).
 * @param array $translation
 *   An array with the structured translated data.
 *
 * @see TMGMTNodeSourcePluginController::getData()
 */
function tmgmt_node_update_node_translation($node, $translation, $language) {
  foreach ($translation as $name => $values) {
    // Special case for the node title.
    if ($name == 'node_title') {
      $node->title = $values['#text'];
      continue;
    }
    if (!is_array($values)) {
      continue;
    }
    tmgmt_field_populate_object($node, $language, $name, $values);
  }
  node_save($node);
}

/**
 * Implements hook_views_api().
 */
function tmgmt_node_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tmgmt_node') . '/views',
);
}

/**
 * Get the translation source node of a node.
 *
 * @param $node
 */
function tmgmt_node_get_source_node($node) {
  if ($node->tnid != 0 && $node->tnid != $node->nid) {
    $node = node_load($node->tnid);
  }
  return $node;
}

/**
 * Returns all node types which are translatable.
 *
 * @return array
 */
function get_translatable_node_types() {
  $types = array();
  foreach (node_type_get_names() as $type => $name) {
    // @TODO: Figure out whether this is the right constant or > 0 is better here.
    if (translation_supported_type($type) == TRANSLATION_ENABLED) {
      $types[] = $type;
    }
  }
  return $types;
}
