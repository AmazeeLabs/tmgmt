<?php

/**
 * @file
 * Source plugin for the Translation Management system that handles nodes.
 */

/**
 * Implements hook_tmgmt_source_plugin_info().
 */
function tmgmt_node_tmgmt_source_plugin_info() {
  return array(
    'node' => array(
      'label' => t('Node'),
      'description' => t('Source handler for nodes.'),
      'controller class' => 'TMGMTNodeSourcePluginController',
    ),
  );
}

/**
 * Updates a node translation.
 *
 * @param object $node
 *   The translated node object (the target).
 * @param array $translated_data
 *   An array with the structured translated data.
 *
 * @see TMGMTNodeSourcePluginController::getData()
 */
function tmgmt_node_update_node_translation($node, $translated_data, $target_language) {
  foreach ($translated_data as $field_name => $values) {
    // Special case for the node  title.
    if ($field_name == 'node_title') {
      $node->title = $values[0]['value']['#text'];
      continue;
    }
    if (!is_array($values)) {
      continue;
    }
    $index = 0;
    $field_info = field_info_field($field_name);
    foreach ($values as $delta => $value) {
      $tdata = array();
      foreach ($value as $input_name => $input_value) {
        $tdata[$input_name] = $input_value['#text'];
      }
      $field_lang = $field_info['translatable'] ? $target_language : LANGUAGE_NONE;
      // Make sure the array_merge() gets an array as a first parametere.
      if (!isset($node->{$field_name}[$field_lang]) || !isset($node->{$field_name}[$field_lang][$index])) {
        $node->{$field_name}[$field_lang][$index] = array();
      }
      $node->{$field_name}[$field_lang][$index] = array_merge($node->{$field_name}[$field_lang][$index], $tdata);
      $index++;
    }
  }
  node_save($node);
}

/**
 * Implements hook_views_api().
 */
function tmgmt_node_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tmgmt_node') . '/views',
);
}
