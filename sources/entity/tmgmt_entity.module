<?php

/**
 * @file
 * Source plugin for the Translation Management system that handles entities.
 */

/**
 * Implements hook_form_ID_alter().
 *
 * Alters comment node type select box to filter out comment types that belongs
 * to non entity translatable node types.
 */
function tmgmt_entity_form_tmgmt_ui_entity_source_comment_overview_form_alter(&$form, &$form_state) {

  if (!isset($form['search_wrapper']['search']['node_type'])) {
    return;
  }

  // Change the select name to "type" as in the query submitted value will be
  // passed into node.type condition.
  $form['search_wrapper']['search']['type'] = $form['search_wrapper']['search']['node_type'];
  unset($form['search_wrapper']['search']['node_type']);

  // Set new default value.
  $form['search_wrapper']['search']['type']['#default_value'] = isset($_GET['type']) ? $_GET['type'] : NULL;

}

/**
 * Helper function to get entity translatable bundles.
 *
 * Note that for comment entity type it will return the same as for node as
 * comment bundles have no use (i.e. in queries).
 *
 * @param string $entity_type
 *   Drupal entity type.
 *
 * @return array
 *   Array of key => values, where key is type and value its label.
 */
function tmgmt_entity_get_translatable_bundles($entity_type) {

  // If given entity type does not have entity translations enabled, no reason
  // to continue.
  $enabled_types = \Drupal::service('plugin.manager.tmgmt.source')->createInstance('entity')->getItemTypes();
  if (!isset($enabled_types[$entity_type])) {
    return array();
  }

  $translatable_bundle_types = array();
  foreach (entity_get_bundles($entity_type) as $bundle_type => $bundle_definition) {
    if (content_translation_enabled($entity_type, $bundle_type)) {
      $translatable_bundle_types[$bundle_type] = $bundle_definition['label'];
    }
  }
  return $translatable_bundle_types;
}

/**
 * Gets translatable entities of a given type.
 *
 * Additionally you can specify entity property conditions, pager and limit.
 *
 * @param string $entity_type_id
 *   Drupal entity type.
 * @param array $property_conditions
 *   Entity properties. There is no value processing so caller must make sure
 *   the provided entity property exists for given entity type and its value
 *   is processed.
 * @param bool $pager
 *   Flag to determine if pager will be used.
 *
 * @return array
 *   Array of translatable entities.
 */
function tmgmt_entity_get_translatable_entities($entity_type_id, $property_conditions = array(), $pager = FALSE) {

  // If given entity type does not have entity translations enabled, no reason
  // to continue.
  $enabled_types = \Drupal::service('plugin.manager.tmgmt.source')->createInstance('entity')->getItemTypes();
  if (!isset($enabled_types[$entity_type_id])) {
    return array();
  }

  $langcodes = array_keys(language_list());
  $languages = array_combine($langcodes, $langcodes);

  $entity_type = \Drupal::entityManager()->getDefinition($entity_type_id);
  $label_key = $entity_type->getKey('label');

  $id_key = $entity_type->getKey('id');
  $query = db_select($entity_type->getBaseTable(), 'e');
  $query->addField('e', $id_key);

  $langcode_table_alias = 'e';
  if ($data_table = $entity_type->getDataTable()) {
    $langcode_table_alias = $query->innerJoin($data_table, 'data_table', '%alias.' . $id_key . ' = e.' . $id_key . ' AND %alias.default_langcode = 1');
  }

  // Searching for sources with missing translation.
  if (!empty($property_conditions['target_status']) && !empty($property_conditions['target_language']) && in_array($property_conditions['target_language'], $languages)) {

    $translation_table_alias = db_escape_field('et_' . $property_conditions['target_language']);
    $query->leftJoin('content_translation', $translation_table_alias, "%alias.entity_type = :entity_type AND %alias.entity_id = e.$id_key AND %alias.langcode = :language",
        array(':entity_type' => $entity_type_id, ':language' => $property_conditions['target_language']));

    // Exclude entities with having source language same as the target language
    // we search for.
    $query->condition($langcode_table_alias . '.langcode', $property_conditions['target_language'], '<>');

    if ($property_conditions['target_status'] == 'untranslated_or_outdated') {
      $or = db_or();
      $or->isNull("$translation_table_alias.langcode");
      $or->condition("$translation_table_alias.outdated", 1);
      $query->condition($or);
    }
    elseif ($property_conditions['target_status'] == 'outdated') {
      $query->condition("$translation_table_alias.outdated", 1);
    }
    elseif ($property_conditions['target_status'] == 'untranslated') {
      $query->isNull("$translation_table_alias.langcode");
    }
  }

  // Remove the condition so we do not try to add it again below.
  unset($property_conditions['target_language']);
  unset($property_conditions['target_status']);

  // Searching for the source label.
  if (!empty($label_key) && isset($property_conditions[$label_key])) {
    $search_tokens = explode(' ', $property_conditions[$label_key]);
    $or = db_or();

    foreach ($search_tokens as $search_token) {
      $search_token = trim($search_token);
      if (strlen($search_token) > 2) {
        $or->condition($label_key, "%$search_token%", 'LIKE');
      }
    }

    if ($or->count() > 0) {
      $query->condition($or);
    }

    unset($property_conditions[$label_key]);
  }

  if ($bundle_key = $entity_type->getKey('bundle')) {
    $bundles = array();
    foreach (array_keys(entity_get_bundles($entity_type_id)) as $bundle) {
      if (content_translation_enabled($entity_type_id, $bundle)) {
        $bundles[] = $bundle;
      }
    }
    if (!$bundles) {
      return array();
    }

    // If we have type property add condition.
    if (isset($property_conditions[$bundle_key])) {
      $query->condition('e.' . $bundle_key, $property_conditions[$bundle_key]);
      // Remove the condition so we do not try to add it again below.
      unset($property_conditions[$bundle_key]);
    }
    // If not, query db only for translatable node types.
    else {
      $query->condition('e.' . $bundle_key, $bundles);
    }
  }

  // Add remaining query conditions which are expected to be handled in a
  // generic way.
  foreach ($property_conditions as $property_name => $property_value) {
    $alias = $property_name == 'langcode' ? $langcode_table_alias : 'e';
    $query->condition($alias . '.' . $property_name, $property_value);
  }

  if ($pager) {
    $query = $query->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit(\Drupal::config('tmgmt.settings')->get('source_list_limit'));
  }
  else {
    $query->range(0, \Drupal::config('tmgmt.settings')->get('source_list_limit'));
  }

  $query->orderBy($entity_type->getKey('id'), 'DESC');
  $result = $query->execute();
  $entity_ids = $result->fetchCol();
  $entities = array();

  if (!empty($entity_ids)) {
    $entities = entity_load_multiple($entity_type_id, $entity_ids);
  }

  return $entities;
}

/**
 * Implements hook_tmgmt_source_suggestions()
 */
function tmgmt_entity_tmgmt_source_suggestions(array $items, \Drupal\tmgmt\Entity\Job $job) {
  $suggestions = array();

  foreach ($items as $item) {
    if (($item instanceof \Drupal\tmgmt\Entity\JobItem) && ($item->plugin == 'entity') || ($item->plugin == 'node')) {
      // Load the entity and extract the bundle name to get all fields from the
      // current entity.
      $entity = entity_load($item->item_type, $item->item_id);

      // Loop over all fields, check if they are NOT translatable. Only if a
      // field is not translatable we may suggest a referenced entity. If so,
      // check for a supported field type (image and file currently here).
      foreach ($entity as $field) {
        $definition = $field->getFieldDefinition();

        // Loop over all field items.
        foreach ($field as $field_item) {
          // Loop over all properties of a field item.
          foreach ($field_item->getProperties(TRUE) as $property) {
            if ($property instanceof \Drupal\Core\Entity\Plugin\DataType\EntityReference && $target = $property->getTarget()) {
              $enabled = content_translation_enabled($target->getEntityTypeId(), $target->bundle());
              if ($enabled) {
                // Add the translation as a suggestion.
                $suggestions[] = array(
                  'job_item' => tmgmt_job_item_create('entity', $target->getEntityTypeId(), $target->id()),
                  'reason' => t('Field @label', array('@label' => $definition->getFieldLabel())),
                  'from_item' => $item->id(),
                );
              }
            }
          }
        }
      }
    }
  }

  return $suggestions;
}
