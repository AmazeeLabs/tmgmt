<?php

/**
 * Basic i18n String Source tests.
 */
class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('i18n String Source tests'),
      'description' => t('Exporting source data from i18n string and saving translations back'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_i18n_string', 'tmgmt_test', 'i18n_menu', 'i18n_taxonomy'));
  }

  function testI18nStringSourceTaxonomy() {
    // Create a vocabulary to be translated.
    $config = array(
      'name' => $this->randomName(),
      'i18n_mode' => I18N_MODE_TRANSLATE,
    );
    $vocabulary = entity_create('taxonomy_vocabulary', $config);
    taxonomy_vocabulary_save($vocabulary);

    $source_text = $vocabulary->name;
    $string_name = 'taxonomy:vocabulary:' . $vocabulary->vid . ':name';

    $string = i18n_string($string_name, $source_text);

    // Create the new job and job item.
    $job = $this->createJob();
    $job->translator = 'test_translator';
    $job->translator_context = array();

    $item1 = $job->addItem('i18n_string', 'i18n_string', $string_name);

    $data = $item1->getSourceData();
    $this->assertEqual($source_text, $data['#text']);

    // Check the structure of the imported data.
    $this->assertEqual($item1->item_id, $string_name, t('String is correctly saved'));

    //$job->requestTranslation();

    $desired_translation = 'de_' . $source_text;
    $this->assertEqual(i18n_string_translate($string_name, $source_text, array('langcode' => 'de')), $desired_translation);
  }

  function testI18nStringSourceMenu() {
    // Create a menu to be translated.
    $config = array(
      'menu_name' => $this->randomName(),
      'title' => $this->randomName(),
      'description' => $this->randomName(),
      'i18n_mode' => I18N_MODE_TRANSLATE,
    );
    menu_save($config);
    $menu = menu_load($config['menu_name']);

    $source_text = $menu['title'];
    $string_name = 'menu:menu:' . $menu['menu_name'] . ':title';

    $string = i18n_string($string_name, $source_text);

    // Create the new job and job item.
    $job = $this->createJob();
    $job->translator = 'test_translator';
    $job->translator_context = array();

    $item1 = $job->addItem('i18n_string', 'i18n_string', $string_name);

    $data = $item1->getSourceData();
    $this->assertEqual($source_text, $data['#text']);

    // Check the structure of the imported data.
    $this->assertEqual($item1->item_id, $string_name, t('String is correctly saved'));

    //$job->requestTranslation();

    $desired_translation = 'de_' . $source_text;
    $this->assertEqual(i18n_string_translate($string_name, $source_text, array('langcode' => 'de')), $desired_translation);
  }
}
