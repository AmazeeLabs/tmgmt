<?php
/**
 * @file
 * Source plugin for the Translation Management system that handles nodes.
 */

/**
 * implementation of hook_menu().
 * adds a tab to every node to show pending jobs and to create new jobs.
 */
function tmgmt_node_menu() {

  $items = array();

  $items['node/%node/create-job'] = array(
    'title' => t('Translation management'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_node_translator_settings_form', 1),
    'access callback' => '_translation_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20
  );

  return $items;
}

/**
 * Form for the node translator settings form.
 */
function tmgmt_node_translator_settings_form($form, &$form_state, $node) {


  // Check for pending jobs.
  $jobs = tmgmt_job_load_multiple_by_source('node', 'node', $node->vid);
  if (!empty($jobs)) {
    foreach ($jobs as $job) {
//      dsm($job);
    }
  }

  $language_options = array();
  // get all avalible languages from core translation module.
  $avalible_languages = language_list();
  // prepare language array with all avalible languages but the sourcelanguage.
  foreach ($avalible_languages as $language) {
    if ($language->language != $node->language) {
      $language_options[$language->language] = $language->name;
    } else {
      $node_language = $language->name;
    }
  }

  $form['source_language_display'] = array(
    '#type' => 'item',
    '#title' => t('Source language'),
    '#markup' => $node_language,
  );
  $form['source_language'] = array(
    '#type' => 'hidden',
    '#value' => $node->language,
  );

  $form['target_language'] = array(
    '#type' => 'select',
    '#title' => t('Target language'),
    '#description' => t('The target language'),
    '#default_value' => 'german',
    '#options' => $language_options,
  );

  // TODO: Filter translater by supported languages
  $translator_plugins = tmgmt_translator_plugin_labels();

  $form['translation_service'] = array(
    '#type' => 'select',
    '#title' => t('Translation type'),
    '#options' => $translator_plugins,
    '#ajax' => array(
      'callback' => 'tmgmt_node_get_translator_options',
      'wrapper' => 'tmgmt-translator-options',
      'method' => 'replace',
    ),
  );

  $form['options'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="tmgmt-translator-options">',
    '#suffix' => '</div>',
  );

  $form['options']['description'] = array(
    '#type' => 'item',
    '#title' => t('About this service'),
    '#markup' => reset($translator_plugins),
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('create job'),
    '#weight' => 50,
  );
  return $form;
}

/**
 * ajax callbackfunction to fetch the options provided by a translator.
 */
function tmgmt_node_get_translator_options($form, &$form_state) {
  $active_translator = $form_state['values']['translation_service'];
  $translator = tmgmt_translator_plugin_info($active_translator);

  $form['options']['description'] = array(
    '#type' => 'item',
    '#title' => t('About this service'),
    '#markup' => t($translator['description']),
  );
  return $form['options'];
}

/**
 * node translator submit function.
 * will create a job with the node as item.
 */
function tmgmt_node_translator_settings_form_submit($form, &$form_state) {

  $values = $form_state['values'];

  // create the job object.
  $job = tmgmt_job_create($values['source_language'], $values['target_language']);

  // add the selected translator.
  $job->translator = $values['translation_service'];
  $job->save();
  // create a job item and add it to the job.
  $item = tmgmt_job_item_create('node', 'node', $values['nid']);
  $job->addItem($item);

  // Mark the job as prepared.
  $job->setState(TMGMTJob::STATE_PREPARED);
  $job->save();
  drupal_set_message(t('Translation job has been created.'));
}

/**
 * Implements hook_tmgmt_source_plugin_info().
 *
 * @ingroup source
 */
function tmgmt_node_tmgmt_source_plugin_info() {
  return array(
    'node' => array(
      'label' => t('Node'),
      'description' => t('Source handler for nodes.'),
      'controller class' => 'TMGMTNodeSourcePluginController',
    ),
  );
}

/**
 * Updates a node translation.
 *
 * @param object $node
 *   The translated node object (the target).
 *
 * @param array $translated_data
 *   An array with the structured translated data.
 *   @see TMGMTNodeSourcePluginController::getData().
 */
function tmgmt_node_update_node_translation($node, $translated_data, $target_language) {
  foreach ($translated_data as $field_name => $values) {
    // Special case for the node title.
    if ($field_name == 'node_title') {
      $node->title = $values[0]['value']['#text'];
      continue;
    }
    $index = 0;
    $field_info = field_info_field($field_name);
    foreach ($values as $key => $value) {
      $tdata = array();
      foreach ($value as $input_name => $input_value) {
        $tdata[$input_name] = $input_value['#text'];
      }
      $field_lang = LANGUAGE_NONE;
      if ($field_info['translatable']) {
        $field_lang = $target_language;
      }
      $node->{$field_name}[$field_lang][$index] = $tdata;
      $index++;
    }
  }
  node_save($node);
}

/**
 * Implements hook_tmgmt_source_translation_structure() for the text module.
 *
 * @todo: this hook should probably be placed elsewhere.
 */
function text_tmgmt_source_translation_structure($field_name, $node, $field_info, $instance, $job) {
  // @todo: there may be a problem if the user changes the order of the values
  // in the case of a field with multiple values...
  $field_lang = field_language('node', $node, $field_name);
  $structure = array();
  if (!empty($node->{$field_name})) {
    foreach ($node->{$field_name}[$field_lang] as $key => $value) {
      $structure[$key]['value'] = array(
        '#label' => t('!field_name: Value nr. !count', array('!field_name' => $instance['label'], '!count' => $key), array('langcode' => $job->source_language)),
        '#text' => $value['value'],
        '#translate' => TRUE,
      );
      if ($field_info['type'] == 'text_with_summary' && !empty($value['summary'])) {
        $structure[$key]['summary'] = array(
          '#label' => t('!field_name: Summary nr. !count',array('!field_name' => $instance['label'], '!count' => $key), array('langcode' => $job->source_language)),
          '#text' => $value['summary'],
          '#translate' => TRUE
        );
      }
    }
  }
  return $structure;
}
