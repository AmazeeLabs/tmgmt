<?php

/**
 * A new translation job, can not yet be submitted.
 */
define('TMGMT_JOB_STATE_NEW', 0);

/**
 * A prepared translation job, not yet submitted to a translator.
 */
define('TMGMT_JOB_STATE_PREPARED', 1);

/**
 * A translation job that has been submitted to the translator.
 */
define('TMGMT_JOB_STATE_SUBMITTED', 2);

/**
 * A translation job that has been rejected by the translator.
 *
 * The response contains information why the job was rejected.
 */
define('TMGMT_JOB_STATE_REJECTED', 3);

/**
 * The translation job was translated and needs to be reviewed.
 */
define('TMGMT_JOB_STATE_REVIEW', 4);

/**
 * The translation has been accepted and the job is finished.
 */
define('TMGMT_JOB_STATE_ACCEPTED', 5);

/**
 * The translation job has been cancelled.
 */
define('TMGMT_JOB_STATE_CANCELLED', 6);

/**
 * Implements hook_menu(). 
 */
function tmgmt_menu() {
  $items = array();
  
  // Add settings menu item for each plugin that is using settings form.
  foreach (tmgmt_translator_plugin_info() as $plugin => $plugin_info) {
    $plugin_controller = tmgmt_translator_plugin_controller($plugin);
    if (method_exists($plugin_controller, 'settingsForm')) {
      if (empty($items)) {
        // If we have any menu item then lets add root item also.
        $items['admin/config/regional/tmgmt'] = array(
          'title' => 'Translation Management',
          'description' => 'Translation Management Suite.',
          'access arguments' => array('administer site configuration'),
        );
      }
      $items['admin/config/regional/tmgmt/' . $plugin] = array(
        'title' => $plugin_info['label'],
        'description' => $plugin_info['description'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tmgmt_' . $plugin . '_translator_settings_form', $plugin),
        'access arguments' => array('administer site configuration'),
      );
    }
  }
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function tmgmt_entity_info() {
  $info['tmgmt_job'] = array(
    'label' => t('Translation Management Job'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobController',
    'metadata controller class' => 'TMGMTJobMetadataController',
    'entity class' => 'TMGMTJob',
    'base table' => 'tmgmt_job',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjid',
    ),
  );
  $info['tmgmt_job_item'] = array(
    'label' => t('Translation Management Job Item'),
    'module' => 'tmgmt',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'TMGMTJobItemMetadataController',
    'entity class' => 'TMGMTJobItem',
    'base table' => 'tmgmt_job_item',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjiid',
    ),
  );
  $info['tmgmt_job_message'] = array(
    'label' => t('Translation Management Job Message'),
    'module' => 'tmgmt',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'TMGMTJobMessageMetadataController',
    'entity class' => 'TMGMTJobMessage',
    'base table' => 'tmgmt_job_message',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjmid',
    ),
  );
  $info['tmgmt_translator'] = array(
    'label' => t('Translation Management Translator'),
    'module' => 'tmgmt',
    'controller class' => 'EntityAPIControllerExportable',
    'metadata controller class' => 'TMGMTTranslatorMetadataController',
    'entity class' => 'TMGMTTranslator',
    'base table' => 'tmgmt_translator',
    'exportable' => TRUE,
    // @todo: Fix entity api to check if the entitycache module is enabled.
    //'entity cache' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tid',
      'name' => 'name',
      'label' => 'label',
    ),
  );
  return $info;
}

/**
 * Implements hook_forms().
 */
function tmgmt_forms() {
  $info = array();
  // Give each translator settings form a unique form id.
  foreach (tmgmt_translator_plugin_info() as $plugin => $plugin_info) {
    $info['tmgmt_' . $plugin . '_translator_settings_form'] = array(
      'callback' => 'tmgmt_translator_settings_form',
      'wrapper_callback' => 'tmgmt_translator_settings_form_defaults',
    );
  }
  return $info;
}

/**
 * Populate translation plugin settings form with default values.
 * 
 * @param array $form
 * @param array $form_state
 * @param string $plugin
 *   Translation plugin name.
 * @return array
 *   Form.
 */
function tmgmt_translator_settings_form_defaults($form, &$form_state, $plugin) {
  $form = system_settings_form($form, $form_state);
  return $form;
}

/**
 * Get plugin translation settings form.
 * 
 * @param array $form
 * @param array $form_state
 * @param string $plugin 
 *   Translation plugin name.
 */
function tmgmt_translator_settings_form($form, &$form_state, $plugin) {
  $plugin_controller = tmgmt_translator_plugin_controller($plugin);
  $form = $plugin_controller->settingsForm($form, $form_state);
  foreach (element_children($form) as $key) {
    $form['tmgmt_' . $plugin . '_' . $key] = $form[$key];
    unset($form[$key]);
  }
  return $form;
}

/**
 * @addtogroup job
 * @{
 */

/**
 * Loads a translation job.
 */
function tmgmt_job_load($tjid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function tmgmt_job_load_multiple(array $tjids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job', $tjids, $conditions, $reset);
}

/**
 * Queries the database for all job entities that host a job item that
 * links to a specific source object.
 *
 * @param $source_type
 *   The source type.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 *
 * @return
 *   An array of job entities.
 */
function tmgmt_job_load_multiple_by_source($source_type, $item_type, $item_id) {
  $query = db_select('tmgmt_job', 'tj')->fields('tj', array('tjid'));
  $query->innerJoin('tmgmt_job_item', 'tji', 'tj.tjid = tji.tjid');
  $jobs = $query->execute()->fetchCol();
  if (!empty($jobs)) {
    return tmgmt_job_load_multiple($jobs);
  }
  return array();
}

/**
 * Loads a translation job message.
 */
function tmgmt_job_message_load($tjmid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjmid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation job messages.
 */
function tmgmt_job_message_load_multiple(array $tjmids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job_message', $tjmids, $conditions, $reset);
}

/**
 * Loads a translation job item.
 */
function tmgmt_job_item_load($tjiid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation job items.
 */
function tmgmt_job_item_load_multiple(array $tjiids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job_item', $tjiids, $conditions, $reset);
}

/**
 * Creates a translation job item.
 *
 * @param $source_plugin
 *   The plugin name.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $values
 *   Array of additional entity values to be set.
 *
 * @return TMGMTJobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_item_create($source_plugin, $item_type, $item_id, array $values = array()) {
  return entity_create('tmgmt_job_item', array_merge($values, array(
    'source_plugin' => $source_plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  )));
}

/**
 * Creates a translation job.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $values
 *   (Optional) Array of additional entity values.
 *
 * @return TMGMTJob
 *   The job entity.
 */
function tmgmt_job_create($source_language, $target_language, array $values = array()) {
  return entity_create('tmgmt_job', array_merge($values, array(
    'source_language' => $source_language,
    'target_language' => $target_language,
  )));
}

/**
 * Static method to retrieve a labeled list of all available states.
 *
 * @return array
 *   A list of all available states.
 */
function tmgmt_job_states() {
  return array(
    TMGMT_JOB_STATE_NEW => t('New'),
    TMGMT_JOB_STATE_PREPARED => t('Prepared'),
    TMGMT_JOB_STATE_SUBMITTED => t('Submitted'),
    TMGMT_JOB_STATE_REJECTED => t('Rejected'),
    TMGMT_JOB_STATE_REVIEW => t('Needs review'),
    TMGMT_JOB_STATE_ACCEPTED => t('Accepted'),
    TMGMT_JOB_STATE_CANCELLED => t('Cancelled'),
  );
}

/**
 * @} End of "addtogroup job".
 */

/**
 * @addtogroup translator
 * @{
 */

/**
 * Loads a translator.
 */
function tmgmt_translator_load($tid, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array($tid), array(), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads a translator based on the name.
 */
function tmgmt_translator_load_by_name($name, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array(), array('name' => $name), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_translator_load_multiple(array $tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_translator', $tids, $conditions, $reset);
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 */
function tmgmt_translator_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('translator', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TMGMTTranslatorPluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_translator_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('translator', $plugin);
}

/**
 * Returns an array of all available translator plugins with the labels as
 * values and the machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function tmgmt_translator_plugin_labels($available_only = FALSE) {
  $translators = _tmgmt_plugin_labels('translator');
  if ($available_only) {
    foreach ($translators as $name => $label) {
      $plugin = tmgmt_translator_plugin_controller($name);
      if (!$plugin->isAvailable()) {
        unset($translators[$name]);
      }
    }
  }
  return $translators;
}

/**
 * @} End of "addtogroup translator".
 */

/**
 * @addtogroup source
 * @{
 */

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function tmgmt_source_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_source_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('source', $plugin);
}

/**
 * Returns an array of all available source plugins with the labels as
 * values and the machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function tmgmt_source_plugin_labels() {
  return _tmgmt_plugin_labels('source');
}

/**
 * @} End of "addtogroup source".
 */

/**
 * Discovers all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function _tmgmt_plugin_info($type, $plugin = NULL) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('tmgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 'tmgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('tmgmt_' . $type . '_plugin_info', $info);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  else if (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function _tmgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = _tmgmt_plugin_info($type, $plugin);
    $class = isset($info['controller class']) ? $info['controller class'] : 'TMGMTDefault' . ucfirst($type) . 'PluginController';
    $cache[$type][$plugin] = new $class($plugin);
  }
  return $cache[$type][$plugin];
}

/**
 * Returns an array of labels of all available plugins of a given type with the
 * machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function _tmgmt_plugin_labels($type) {
  $list = array();
  $plugin_info = 'tmgmt_' . $type . '_plugin_info';
  foreach ($plugin_info() as $key => $info) {
    $list[$key] = $info['label'];
  }
  return $list;
}

/**
 * Converts a nested data array into a flattened structure with a combined key.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be joined together using a colon, so for example
 * $data['key1']['key2']['key3'] will be converted into
 * $flattened_data['key1:key2:key3'].
 *
 * @param $data
 *   The nested array structure that should be flattened.
 * @param $prefix
 *   Internal use only, indicates the current key prefix when recursing into
 *   the data array.
 *
 * @return
 *   The flattened data array.
 *
 * @see tmgmt_unflatten_data().
 */
function tmgmt_flatten_data($data, $prefix = NULL) {
  $flattened_data = array();
  // Each element is either a text (has #text property defined) or has children,
  // not both.
  if (!empty($data['#text'])) {
    $flattened_data[$prefix] = $data;
  }
  else {
    $prefix = !empty($prefix) ? $prefix . ':' : '';
    foreach (element_children($data) as $key) {
      $flattened_data += tmgmt_flatten_data($data[$key], $prefix . $key);
    }
  }
  return $flattened_data;
}

/**
 * Converts a flattened data structure into a nested array.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be created based on the colon, so for example
 * $flattened_data['key1:key2:key3'] will be converted into
 * $data['key1']['key2']['key3'].
 *
 * @param $data
 *   The flattened data array.
 *
 * @return
 *   The nested data array.
 *
 * @see tmgmt_flatten_data().
 */
function tmgmt_unflatten_data($flattened_data) {
  $data = array();
  foreach ($flattened_data as $key => $flattened_data_entry) {
    drupal_array_set_nested_value($data, explode(':', $key), $flattened_data_entry);
  }
  return $data;
}
