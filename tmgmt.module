<?php

/**
 * Implements hook_entity_info().
 */
function tmgmt_entity_info() {
  return array(
    'tmgmt_map' => array(
      'label' => t('Translation Management Map'),
      'module' => 'tmgmt',
      'controller class' => 'TranslationManagementMapController',
      'entity class' => 'TranslationManagementMap',
      'base table' => 'tmgmt_map',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tmid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'tmgmt_job' => array(
      'label' => t('Translation Management Job'),
      'module' => 'tmgmt',
      'controller class' => 'TranslationManagementJobController',
      'entity class' => 'TranslationManagementJob',
      'base table' => 'tmgmt_job',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tjid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'tmgmt_translator' => array(
      'label' => t('Translation Management Translator'),
      'module' => 'tmgmt',
      'controller class' => 'TranslationManagementTranslatorController',
      'entity class' => 'TranslationManagementTranslator',
      'base table' => 'tmgmt_translator',
      'exportable' => TRUE,
      'entity cache' => TRUE,
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'entity keys' => array(
        'id' => 'tid',
        'name' => 'name',
        'label' => 'label',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Loads a translation map.
 */
function tmgmt_map_load($tmid, $reset = FALSE) {
  $maps = tmgmt_map_load_multiple(array($tmid), array(), $reset);
  return $maps ? reset($maps) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_map_load_multiple(array $tmids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_map', $tmids, $conditions, $reset);
}

/**
 * Gets the map for the passed in arguments.
 *
 * @param $plugin
 *   Name of the source plugin.
 * @param $item_type
 *   Item type.
 * @param $item_id
 *   Item ID.
 * @param $autocreate
 *   (Optional) If TRUE, create the map if not yet existent. Defaults to FALSE.
 *
 * @return TranslationManagementMap
 *   A translation map if existing or autocreated, FALSE otherwise.
 *
 */
function tmgmt_map_get($plugin, $item_type, $item_id, $autocreate = FALSE) {
  $tmid = db_select('tmgmt_map', 'tm')
    ->fields('tm', array('tmid'))
    ->condition('plugin', $plugin)
    ->condition('item_type', $item_type)
    ->condition('item_id', $item_id)
    ->execute()
    ->fetchField();

  // If we found a translation map id, return the map.
  if ($tmid) {
    return tmgmt_map_load($tmid);
  }

  // If autocreate is set to TRUE, create a new map.
  if ($autocreate) {
    $map = entity_create('tmgmt_map', array(
      'item_type' => $item_type,
      'item_id' => $item_id,
      'plugin' => $plugin,
    ));
    $map->save();
    return $map;
  }

  // Otherwise, return FALSE.
  return FALSE;
}

/**
 * Implementation of hook_forms().
 */
function tmgmt_forms() {
  $info = array();
  // Give each translator settings form a unique form id.
  foreach (tmgmt_translator_plugin_info() as $plugin => $info) {
    $info['tmgmt_' . $plugin . '_translator_settings_form'] = array(
      'callback' => 'tmgmt_translator_settings_form',
      'wrapper' => 'tmgmt_translator_settings_form_defaults',
    );
  }
  return $info;
}

/**
 * Loads a translation job.
 */
function tmgmt_job_load($tjid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function tmgmt_job_load_multiple(array $tjids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job', $tjids, $conditions, $reset);
}

/**
 * Loads a translator.
 */
function tmgmt_translator_load($tid, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array($tid), array(), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_translator_load_multiple(array $tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_translator', $tids, $conditions, $reset);
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 */
function tmgmt_translator_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TranslationManagementServicePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_translator_plugin_controller($plugin) {
  return _tmgmt_plugin_controler('source', $plugin);
}

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function tmgmt_source_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TranslationManagementSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_source_plugin_controller($plugin) {
  return _tmgmt_plugin_controler('source', $plugin);
}

/**
 * Discovers all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function _tmgmt_plugin_info($type, $plugin = NULL) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('tmgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 'tmgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('tmgmt_' . $type . '_plugin_info', $info);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  else if (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TranslationManagementSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function _tmgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = tmgmt_plugin_info($type, $plugin);
    $class = isset($info['controller class']) ? $info['controller class'] : 'TranslationManagementDefault' . ucfirst($type) . 'PluginController';
    $cache[$type][$plugin] = new $class($plugin);
  }
  return $cache[$type][$plugin];
}
