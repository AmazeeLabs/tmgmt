<?php

/**
 * @file
 * Main module file for the Translation Management module.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Component\Utility\Unicode;
use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt\Entity\Translator;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\tmgmt\Entity\JobItem;
use Drupal\tmgmt\TranslatorRejectDataInterface;

/**
 * @addtogroup tmgmt_job
 * @{
 */

/**
 * The translation data item has not been translated.
 */
define('TMGMT_DATA_ITEM_STATE_PENDING', 0);

/**
 * The translation data item has been reviewed.
 */
define('TMGMT_DATA_ITEM_STATE_REVIEWED', 1);

/**
 * The translation data item has been translated.
 */
define('TMGMT_DATA_ITEM_STATE_TRANSLATED', 2);

/**
 * The translation data item has been reviewed.
 */
define('TMGMT_DATA_ITEM_STATE_ACCEPTED', 3);

/**
 * @} End of "addtogroup tmgmt_job".
 */

/**
 * String used to delimit flattened array keys.
 */
const TMGMT_ARRAY_DELIMITER = '][';

/**
 * Implements hook_modules_installed().
 */
function tmgmt_modules_installed($modules) {
  $translator_manager = \Drupal::service('plugin.manager.tmgmt.translator');
  $translator_manager->clearCachedDefinitions();
  foreach ($translator_manager->getDefinitions() as $definition) {
    // Check if this translator plugin has been added by one of the recently
    // installed modules and doesn't prevent auto creation.
    if ((!isset($definition['auto create']) || $definition['auto create'] == TRUE) && in_array($definition['provider'], $modules)) {
      tmgmt_translator_auto_create($definition);
    }
  }
}

/**
 * Implements hook_cron().
 */
function tmgmt_cron() {
  $offset = \Drupal::config('tmgmt.settings')->get('purge_finished');
  if ($offset != '_never') {
    // Delete all finished translation jobs that haven't been changed for a
    // time span longer than the given offset.
    $tjid = \Drupal::entityQuery('tmgmt_job')
      ->condition('state', Job::STATE_FINISHED)
      ->condition('changed', REQUEST_TIME - $offset, '<=')
      ->execute();
    if (!empty($tjid)) {
      entity_delete_multiple('tmgmt_job', $tjid);
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function tmgmt_local_tasks_alter(&$local_tasks) {
  // Look for the first source overview local task and make the parent use the
  // same route arguments.
  // @todo: Find a nicer way to get the main source (usually entity:node), also,
  //   this looses the trail because the parent points directly to the first
  //   sub-task. Use a different route that doesn't require the arguments?
  foreach ($local_tasks as $plugin_id => $local_task) {
    if (strpos($plugin_id, 'tmgmt.sources:') !== FALSE) {
      $local_tasks['tmgmt.sources_parent']['route_parameters'] = $local_task['route_parameters'];
      return;
    }
  }
  // If this point was reached, then no sources are enabled, prevent any error
  // by removing the sources local task completely.
  unset($local_tasks['tmgmt.sources_parent']);
}

/**
 * Returns an array of languages that are available for translation.
 *
 * @return array
 *   An array of languages in ISO format.
 */
function tmgmt_available_languages($exclude = array()) {
  $languages = language_list();
  // Remove the language in $exclude from the list of available languages and
  // then apply a filter that only leaves the supported target languages on
  // the list.
  $labels = array();
  foreach ($languages as $langcode => $language) {
    if (!in_array($langcode, $exclude)) {
      $labels[$langcode] = $language->getName();
    }
  }
  return $labels;
}

/**
 * @addtogroup tmgmt_job
 * @{
 */

/**
 * Loads active job entities that have a job item with the identifiers.
 *
 * @param $plugin
 *   The source plugin.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param string $source_language
 *   The source language of the item.
 *
 * @return array
 *   An array of job entities.
 */
function tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_language) {
  $query = db_select('tmgmt_job_item', 'tji');
  $query->innerJoin('tmgmt_job', 'tj', 'tj.tjid = tji.tjid');
  $result = $query->condition('tj.source_language', $source_language)
    // Only query for jobs that are currently active.
    ->condition('tj.state', array(Job::STATE_UNPROCESSED, Job::STATE_ACTIVE))
    // And only query for job items that are not yet finished.
    ->condition('tji.state', JobItem::STATE_ACCEPTED, '<>')
    ->condition('tji.plugin', $plugin)
    ->condition('tji.item_type', $item_type)
    ->condition('tji.item_id', $item_id)
    ->fields('tji', array('tjiid'))
    ->fields('tj', array('target_language'))
    ->orderBy('tji.changed', 'DESC')
    ->groupBy('tj.target_language')
    ->groupBy('tji.tjiid')
    ->groupBy('tji.changed')
    ->execute();
  if ($items = $result->fetchAllKeyed()) {
    $return = array();
    foreach (JobItem::loadMultiple(array_keys($items)) as $key => $item) {
      $return[$items[$key]] = $item;
    }
    return $return;
  }
  return FALSE;
}

/**
 * Loads all latest job entities that have a job item with the identifiers.
 *
 * @param $plugin
 *   The source plugin.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param string $source_language
 *   The source language of the item.
 *
 * @return array
 *   An array of job entities.
 */
function tmgmt_job_item_load_all_latest($plugin, $item_type, $item_id, $source_language) {
  $query = db_select('tmgmt_job_item', 'tji');
  $query->innerJoin('tmgmt_job', 'tj', 'tj.tjid = tji.tjid');
  $result = $query->condition('tj.source_language', $source_language)
    ->condition('tji.state', JobItem::STATE_ACCEPTED, '<>')
    ->condition('tji.plugin', $plugin)
    ->condition('tji.item_type', $item_type)
    ->condition('tji.item_id', $item_id)
    ->fields('tji', array('tjiid'))
    ->fields('tj', array('target_language'))
    ->orderBy('tji.changed', 'DESC')
    ->groupBy('tj.target_language')
    ->groupBy('tji.tjiid')
    ->execute();
  if ($items = $result->fetchAllKeyed()) {
    $return = array();
    foreach (JobItem::loadMultiple(array_keys($items)) as $key => $item) {
      $return[$items[$key]] = $item;
    }
    return $return;
  }
  return FALSE;
}

/**
 * Returns a job which matches the requested source- and target language by
 * user. If no job exists, a new job object will be created.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $account
 *   (Optional) A user object. Defaults to the currently logged in user.
 *
 * @return \Drupal\tmgmt\Entity\Job
 *   The job entity.
 */
function tmgmt_job_match_item($source_language, $target_language, $account = NULL) {
  $account = isset($account) ? $account : \Drupal::currentUser();
  $tjid = \Drupal::entityQuery('tmgmt_job')
    ->condition('source_language', $source_language)
    ->condition('target_language', $target_language)
    ->condition('uid', $account->id())
    ->condition('state', Job::STATE_UNPROCESSED)
    ->execute();
  if (!empty($tjid)) {
    return Job::load(reset($tjid));
  }
  return tmgmt_job_create($source_language, $target_language, $account->id());
}

/**
 * Checks whether a job is finished by querying the job item table for
 * unfinished job items.
 *
 * @param $tjid
 *   The identifier of the job.
 * @return bool
 *   TRUE if the job is finished, FALSE otherwise.
 */
function tmgmt_job_check_finished($tjid) {
  return !\Drupal::entityQuery('tmgmt_job_item')
    ->condition('tjid', $tjid)
    ->condition('state', JobItem::STATE_ACCEPTED, '<>')
    ->range(0, 1)
    ->count()
    ->execute();
}

/**
 * Creates a translation job.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $values
 *   (Optional) An array of additional entity values.
 *
 * @return \Drupal\tmgmt\Entity\Job
 *   The job entity.
 */
function tmgmt_job_create($source_language, $target_language, $uid = 0, array $values = array()) {
  return entity_create('tmgmt_job', array_merge($values, array(
    'source_language' => $source_language,
    'target_language' => $target_language,
    'uid' => $uid,
  )));
}

/**
 * Loads an array with the word and status statistics of a job.
 *
 * @param $tjids
 *   An array of job ids.
 *
 * @return
 *   An array of objects with the keys word_count, count_pending,
 *   count_accepted, count_reviewed and count_translated.
 */
function tmgmt_job_statistics_load(array $tjids) {
  $statistics = &drupal_static(__FUNCTION__, array());

  // First try to get the values from the cache.
  $return = array();
  $tjids_to_load = array();
  foreach ($tjids as $tjid) {
    if (isset($statistics[$tjid])) {
      // Info exists in cache, get it from there.
      $return[$tjid] = $statistics[$tjid];
    }
    else {
      // Info doesn't exist in cache, add job to the list that needs to be
      // fetched.
      $tjids_to_load[] = $tjid;
    }
  }

  // If there are remaining jobs, build a query to fetch them.
  if (!empty($tjids_to_load)) {
    // Build the query to fetch the statistics.
    $query = db_select('tmgmt_job_item', 'tji')
      ->fields('tji', array('tjid'));
    $query->addExpression('SUM(word_count)', 'word_count');
    $query->addExpression('SUM(count_accepted)', 'count_accepted');
    $query->addExpression('SUM(count_reviewed)', 'count_reviewed');
    $query->addExpression('SUM(count_pending)', 'count_pending');
    $query->addExpression('SUM(count_translated)', 'count_translated');
    $result = $query->groupBy('tjid')
      ->condition('tjid', $tjids_to_load)
      ->execute();

    foreach ($result as $row) {
      $return[$row->tjid] = $statistics[$row->tjid] = $row;
    }
  }
  return $return;
}

/**
 * Returns a specific statistic of a job.
 *
 * @param $job
 *   The translation job entity.
 * @param $key
 *   One of word_count, count_pending, count_accepted, count_reviewed and
 *   count_translated.
 *
 * @return
 *   The requested information as an integer.
 */
function tmgmt_job_statistic(Job $job, $key) {
  $statistics = tmgmt_job_statistics_load(array($job->id()));
  if (isset($statistics[$job->id()]->$key)) {
    return $statistics[$job->id()]->$key;
  }
  return 0;
}

/**
 * Creates a translation job item.
 *
 * @param $plugin
 *   The plugin name.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $values
 *   (Optional) An array of additional entity values to be set.
 *
 * @return \Drupal\tmgmt\Entity\JobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = array()) {
  return entity_create('tmgmt_job_item', array_merge($values, array(
    'plugin' => $plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  )));
}

/**
 * Creates a translation job message.
 *
 * @param $message
 *   (Optional) The message to be saved.
 * @param $variables
 *   (Optional) An array of variables to replace in the message on display.
 * @param $values
 *   (Optional) An array of additional entity values to be set.
 *
 * @return \Drupal\tmgmt\Entity\JobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_message_create($message = '', $variables = array(), $values = array()) {
  return entity_create('tmgmt_message', array_merge($values, array(
    'message' => $message,
    'variables' => $variables,
    'uid' => \Drupal::currentUser()->id(),
  )));
}
/**
 * @} End of "addtogroup tmgmt_job".
 */
/**
 * @addtogroup tmgmt_translator
 * @{
 */

/**
 * Loads all translators that are available and, if a translation job is given,
 * support translations for that job with its current configuration.
 *
 * @param \Drupal\tmgmt\Entity\Job $job
 *   (Optional) A translation job.
 *
 * @return array
 *   An array of translators with the machine-readable name of the translators
 *   as array keys.
 */
function tmgmt_translator_load_available($job) {
  $translators = Translator::loadMultiple();
  foreach ($translators as $name => $translator) {
    if (!$translator->isAvailable() || (isset($job) && !$translator->canTranslate($job))) {
      unset($translators[$name]);
    }
  }
  return $translators;
}

/**
 * Checks whether a translator with a certain name is busy and therefore can't
 * be modified or deleted. A translator is considered 'busy' if there are jobs
 * attached to it that are in an active state.
 *
 * @param $translator
 *   The machine-readable name of a translator.
 *
 * @return boolean
 *   TRUE if the translator is busy, FALSE otherwise.
 */
function tmgmt_translator_busy($translator) {
  return (bool) \Drupal::entityQuery('tmgmt_job')
    ->condition('state', Job::STATE_ACTIVE)
    ->condition('translator', $translator)
    ->range(0, 1)
    ->count()
    ->execute();
}

/**
 * Auto creates a translator from a translator plugin definition.
 *
 * @param array $definition
 *   The definition of a translator plugin.
 */
function tmgmt_translator_auto_create(array $definition) {
  $plugin = $definition['id'];
  if (!Translator::load($plugin)) {
    $translator = Translator::create([
      'name' => $plugin,
      'plugin' => $plugin,
      'label' => $definition['label'] . ' (auto created)',
      'description' => (string) $definition['description'],
    ]);
    // Append default settings from the translator plugin definition.
    $translator->setSettings($translator->getPlugin()->defaultSettings());
    $translator->save();
  }
}

/**
 * Returns a list of all available translator labels.
 *
 * @return array
 *   An array containing all available translator labels.
 */
function tmgmt_translator_labels() {
  $labels = array();
  foreach (Translator::loadMultiple() as $translator) {
    $labels[$translator->id()] = $translator->label();
  }
  return $labels;
}

/**
 * Returns a list of flagged translator labels. If a translator is not available
 * it will be suffixed with a short text explaining why it is not available.
 * This can either be because the configuration of the passed job is not
 * supported or because the translator service can't be reached.
 *
 * @param \Drupal\tmgmt\Entity\Job $job
 *   (Optional) A translation job.
 *
 * @return array
 *   An array of flagged translator labels.
 */
function tmgmt_translator_labels_flagged($job = NULL) {
  $labels = array();
  foreach (Translator::loadMultiple() as $translator) {
    if (!$translator->isAvailable()) {
      $labels[$translator->id()] = t('@label (not available)', array('@label' => $translator->label()));
    }
    elseif (isset($job) && !$translator->canTranslate($job)) {
      $labels[$translator->id()] = t('@label (unsupported)', array('@label' => $translator->label()));
    }
    else {
      $labels[$translator->id()] = $translator->label();
    }
  }
  return $labels;
}


/**
 * @} End of "addtogroup tmgmt_translator".
 */

/**
 * Converts a nested data array into a flattened structure with a combined key.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be joined together using a colon, so for example
 * $data['key1']['key2']['key3'] will be converted into
 * $flattened_data['key1][key2][key3'].
 *
 * @param $data
 *   The nested array structure that should be flattened.
 * @param $prefix
 *   Internal use only, indicates the current key prefix when recursing into
 *   the data array.
 *
 * @return array
 *   The flattened data array.
 *
 * @see tmgmt_unflatten_data()
 */
function tmgmt_flatten_data($data, $prefix = NULL, $label = array()) {
  $flattened_data = array();
  if (isset($data['#label'])) {
    $label[] = $data['#label'];
  }
  // Each element is either a text (has #text property defined) or has children,
  // not both.
  if (!empty($data['#text'])) {
    $flattened_data[$prefix] = $data;
    $flattened_data[$prefix]['#parent_label'] = $label;
  }
  else {
    $prefix = isset($prefix) ? $prefix . TMGMT_ARRAY_DELIMITER : '';
    foreach (element_children($data) as $key) {
      $flattened_data += tmgmt_flatten_data($data[$key], $prefix . $key, $label);
    }
  }
  return $flattened_data;
}

/**
 * Converts string keys to array keys.
 *
 * There are three conventions for data keys in use. This function accepts each
 * of it an ensures a array of keys.
 *
 * @param $key
 *   The key can be either be an array containing the keys of a nested array
 *   hierarchy path or a string with '][' or '|' as delimiter.
 *
 * @return
 *   Array of keys.
 */
function tmgmt_ensure_keys_array($key) {
  if (empty($key)) {
    return array();
  }
  if (!is_array($key)) {
    if (strstr($key, '|')) {
      $key = str_replace('|', TMGMT_ARRAY_DELIMITER, $key);
    }
    $key = explode(TMGMT_ARRAY_DELIMITER, $key);
  }
  return $key;
}

/**
 * Converts keys array to string key.
 *
 * There are three conventions for data keys in use. This function accepts each
 * of it an ensures a sting keys.
 *
 * @param $key
 *   The key can be either be an array containing the keys of a nested array
 *   hierarchy path or a string.
 * @param
 *   Delimiter to be use in the keys string. Default is ']['.
 *
 * @return
 *  Keys string.
 */
function tmgmt_ensure_keys_string($key, $delimiter = TMGMT_ARRAY_DELIMITER) {
  if (is_array($key)) {
    $key = implode($delimiter, $key);
  }
  return $key;
}

/**
 * Converts a flattened data structure into a nested array.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be created based on the colon, so for example
 * $flattened_data['key1][key2][key3'] will be converted into
 * $data['key1']['key2']['key3'].
 *
 * @param $data
 *   The flattened data array.
 *
 * @return array
 *   The nested data array.
 *
 * @see tmgmt_flatten_data()
 */
function tmgmt_unflatten_data($flattened_data) {
  $data = array();
  foreach ($flattened_data as $key => $flattened_data_entry) {
    NestedArray::setValue($data, explode(TMGMT_ARRAY_DELIMITER, $key), $flattened_data_entry);
  }
  return $data;
}

/**
 * Array filter callback for filtering untranslatable source data elements.
 */
function _tmgmt_filter_data($value) {
  return !(empty($value['#text']) || (isset($value['#translate']) && $value['#translate'] === FALSE));
}

/**
 * Returns a label for a data item.
 *
 * @param array $data_item
 *   The data item array.
 * @param int $max_length
 *   (optional) Specify the max length that the resulting label string should
 *   be cut to.
 *
 * @return string
 *   A label for the data item.
 */
function tmgmt_data_item_label(array $data_item, $max_length = NULL) {
  if (!empty($data_item['#parent_label'])) {
    if ($max_length) {
      // When having multiple label parts, we don't know how long each of them is,
      // truncating each to the same length might result in a considerably shorter
      // length than max length when there are short and long labels. Instead,
      // start with the max length and repeat until the whole string is less than
      // max_length. Remove 4 characters per part to avoid unecessary loops.
      $current_max_length = $max_length - (count($data_item['#parent_label']) * 4);
      do {
        $current_max_length--;
        $labels = array();
        foreach ($data_item['#parent_label'] as $label_part) {
          // If this not the last part, reserve 3 characters for the delimiter.
          $labels[] = Unicode::truncate($label_part, $current_max_length, FALSE, TRUE);
        }
        $label = implode(t(' > '), $labels);
      } while (Unicode::strlen($label) > $max_length);
      return $label;
    }
    else {
      return implode(t(' > '), $data_item['#parent_label']);
    }
  }
  elseif (!empty($data_item['#label'])) {
    return $max_length ? Unicode::truncate($data_item['#label'], $max_length, FALSE, TRUE) : $data_item['#label'];
  }
  else {
    // As a last resort, fall back to a shortened version of the text. Default
    // to a limit of 50 characters.
    return Unicode::truncate($data_item['#text'], $max_length ? $max_length : 50, FALSE, TRUE);
  }
}

/**
 * Calculates number of words, which a text consists of.
 * Is placed as a separately function to be coverable by unit tests.
 * @see TMGMTWordCountUnitTestCase
 *
 * @param string $text
 * @return int
 *   Returns count of words of text.
 */
function tmgmt_word_count($text) {
  // Strip tags in case it is requested to not include them in the count.
  if (\Drupal::config('tmgmt.settings')->get('word_count_exclude_tags')) {
    $text = strip_tags($text);
  }
  // Replace each punctuation mark with space.
  $text = str_replace(array('`', '~', '!', '@', '"', '#', '$', ';', '%', '^', ':', '?', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[', ']', '\\', '|', '/', '\'', '<', '>', ',', '.'), ' ', $text);
  // Remove duplicate spaces.
  $text =  trim(preg_replace('/ {2,}/', ' ', $text));
  // Turn into an array.
  $array = ($text) ? explode(' ', $text) : array();
  // How many are they?
  $count = count($array);
  // That is what we need.
  return $count;
}

/**
 * Implements hook_theme().
 */
function tmgmt_theme() {
  return array(
    'tmgmt_translator_review_form' => array(
      'render element' => 'element',
      'file' => 'tmgmt.theme.inc',
      'function' => 'theme_tmgmt_translator_review_form',
    ),
    'tmgmt_translator_review_form_element' => array(
      'render element' => 'element',
      'file' => 'tmgmt.theme.inc',
      'function' => 'theme_tmgmt_translator_review_form_element',
    ),
    'tmgmt_translator_review_form_element_status' => array(
      'render element' => 'status',
      'file' => 'tmgmt.theme.inc',
      'function' => 'theme_tmgmt_translator_review_form_element_status',
    ),
    'tmgmt_translation_language_status_single' => array(
      'file' => 'tmgmt.theme.inc',
      'variables' => array('translation_status' => NULL, 'job_item' => NULL),
      'function' => 'theme_tmgmt_translation_language_status_single',
    ),
  );
}

/**
 * Attempts to check out a number of jobs. Performs a number of checks on each
 * job and also allows to alter the behavior through hooks.
 *
 * @param \Drupal\tmgmt\Entity\Job[] $jobs
 *   The jobs to be checked out.
 *
 * @return
 *   Array of redirect url's if there are any jobs that need manual checkout.
 *
 * @ingroup tmgmt_job
 *
 * @see tmgmt_redirect_queue()
 * @see tmgmt_job_checkout_and_redirect()
 */
function tmgmt_job_checkout_multiple(array $jobs) {
  $redirects = array();
  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  \Drupal::moduleHandler()->alter('tmgmt_job_checkout_before', $redirects, $jobs);
  $denied = 0;
  foreach ($jobs as $job) {
    if (!$job->isUnprocessed()) {
      // Job is already checked out, just ignore that one. This could happen
      // if jobs have already been submitted in the before hook.
      continue;
    }
    if (!\Drupal::config('tmgmt.settings')->get('quick_checkout') || tmgmt_job_needs_checkout_form($job)) {

      if (!$job->access('submit')) {
        // Ignore jobs if the user is not allowed to submit, ignore.
        $denied++;
        // Make sure that the job is saved.
        $job->save();
        continue;
      }

      $redirects[] = $job->getSystemPath();
    }
    else {
      // @todo this is dangerous because we don't catch request fails at all.
      // Normally I would expect this to catch all failed requests and
      // afterwards send the user through a multistep form which contains the
      // failed elements.
      // No manual checkout required. Request translations now.
      tmgmt_job_request_translation($job);
    }
  }
  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  \Drupal::moduleHandler()->alter('tmgmt_job_checkout_after', $redirects, $jobs);

  // Display message for created jobs that can not be checked out.
  if ($denied) {
    drupal_set_message(\Drupal::translation()->formatPlural($denied, 'One job has been created.', '@count jobs have been created.'));
  }

  return $redirects;
}

/**
 * Check if a job needs a checkout form. The current checks include if there is
 * more than one translator available, if he has settings and if the job has a
 * fixed target language.
 *
 * @param \Drupal\tmgmt\Entity\Job $job
 *   The job item
 *
 * @return
 *   TRUE if the job needs a checkout form.
 */
function tmgmt_job_needs_checkout_form(Job $job) {
  // If the job has no target language (or source language, even though this
  // should never be the case in our use case), checkout is mandatory.
  if (!$job->getTargetLangcode() || !$job->getSourceLangcode()) {
    return TRUE;
  }
  // If no translator is pre-selected, try to pick one automatically.
  if (!$job->getTranslator()) {
    // If there is more than a single translator available or if there are no
    // translators available at all checkout is mandatory.
    $translators = tmgmt_translator_load_available($job);
    if (empty($translators) || count($translators) > 1) {
      return TRUE;
    }
    $translator = reset($translators);
    $job->translator = $translator->id();
  }
  // If that translator has settings, the checkout is mandatory.
  if ($job->getTranslator()->hasCheckoutSettings($job)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Requests translations for a job and prints messages which have happened since
 * then.
 *
 * @param \Drupal\tmgmt\Entity\Job $job
 *   The job object for which translations should be requested.
 *
 * @return
 *   TRUE if it worked, FALSE if there were any errors of the type error which
 *   means that something did go wrong.
 */
function tmgmt_job_request_translation(Job $job) {
  // Process the translation request.
  $job->requestTranslation();
  return tmgmt_write_request_messages($job);
}

/**
 * Print all messages that occurred since our request to the screen.
 *
 * @param $job
 *    The translation job for which the message should be written.
 *
 * @return
 *   FALSE if there are message with severity error, TRUE otherwise.
 */
function tmgmt_write_request_messages(Job $job) {
  $errors = FALSE;
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->getType() == 'debug') {
      continue;
    }
    if ($message->getType() == 'error') {
      $errors = TRUE;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(Xss::filter($text), $message->getType());
    }
  }
  return !$errors;
}

/**
 * Helper function to output ajaxid.
 *
 * @param string $parent_key
 *   Parent element key.
 *
 * @return string
 *   The ajax id.
 */
function tmgmt_review_form_element_ajaxid($parent_key) {
  return 'tmgmt-ui-element-' . Html::cleanCssIdentifier($parent_key) . '-wrapper';
}

/**
 * Review form revert action callback.
 */
function tmgmt_translation_review_form_revert(array $form, FormStateInterface $form_state) {

  /** @var JobItem $item */
  $item = $form_state->getFormObject()->getEntity();

  $key = tmgmt_ensure_keys_array($form_state->getTriggeringElement()['#data_item_key']);

  if ($item->dataItemRevert($key)) {
    // Update the form_state input values so that the new default vale will be
    // shown.
    $form_key = str_replace('][', '|', $form_state->getTriggeringElement()['#data_item_key']);
    $user_input = $form_state->getUserInput();
    unset($user_input[$form_key]['translation']);
    $form_state->setUserInput($user_input);
    $item->save();
  }
  else {
    drupal_set_message(t('No past revision found, translation was not reverted.'), 'warning');
  }
  $form_state->setRebuild();
}

/**
 * Callback for the action at the job item review form.
 */
function tmgmt_translation_review_form_update_state(array $form, FormStateInterface $form_state) {
  $matches = array();
  // We should have an #name element
  // and the name should beginn with approve-
  // and the $matches should now kontain an element with with name key.
  preg_match("/^(?P<action>[^-]+)-(?P<key>.+)/i", $form_state->getTriggeringElement()['#name'], $matches);
  $values = $form_state->getValues();
  $data = array();
  $job_item = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
  $controller = $job_item->getTranslatorPlugin();
  $success = TRUE;
  switch ($matches['action']) {
    case 'reviewed':
      $form_state->setRebuild();
      $data['#status'] = TMGMT_DATA_ITEM_STATE_REVIEWED;
      break;
    case 'unreviewed':
      $form_state->setRebuild();
      $data['#status'] = TMGMT_DATA_ITEM_STATE_TRANSLATED;
      break;
    case 'reject':
      if (empty($values['confirm'])) {
        if (isset($_GET['destination'])) {
          $destination = $_GET['destination'];
          unset($_GET['destination']);
        }
        else {
          $destination = '';
        }
        tmgmt_redirect_queue_set(array(Url::fromRoute('<current>')->getInternalPath()), $destination);
        $form_state->setRedirectUrl(Url::fromUri('base:' . Url::fromRoute('<current>')->getInternalPath() . '/reject/' . $matches['key']));
        $success = FALSE;
      }
      else {
        $form_state->setRedirectUrl(Url::fromUri('base:' . tmgmt_redirect_queue_dequeue(), array('query' => array('destination' => tmgmt_redirect_queue_destination()))));
        if ($controller instanceof TranslatorRejectDataInterface) {
          $success = $job_item->getTranslatorController()->rejectDataItem($job_item, tmgmt_ensure_keys_array($matches['key']), $values);
        }
      }
    default:
      $data['#status'] = TMGMT_DATA_ITEM_STATE_PENDING;
      break;
  }
  if ($success) {
    $job_item->updateData($matches['key'], $data);
    // If a data item has been rejected and the job is in needs review state,
    // set back to active.
    if ($matches['action'] == 'reject' && $job_item->isNeedsReview()) {
      $job_item->active(FALSE);
    }
  }
  tmgmt_write_request_messages($job_item->getJob());
}

/**
 * Form callback for the reject confirm form.
 */
function tmgmt_translation_review_form_reject_confirm(array $form, FormStateInterface $form_state, JobItem $job_item, $key) {
  // Path of job item review form.
  $path = explode('/', Url::fromRoute('<current>')->getInternalPath());
  $path = implode('/', array_slice($path, 0, count($path) - 2));

  $args = array(
    '@data_item' => $job_item->getData(tmgmt_ensure_keys_array($key), '#label'),
    '@job_item' => $job_item->label(),
  );

  $form = confirm_form( $form, t('Confirm rejection of @data_item in @job_item', $args), $path, '');
  $form_state->set('item', $job_item);
  $form['key'] = array('#type' => 'value', '#value' => $key);
  $form['actions']['submit']['#name'] = 'reject-' . $key;
  $form['actions']['submit']['#submit'] = array('tmgmt_translation_review_form_update_state');

  $form = $job_item->getTranslatorPlugin()->rejectForm($form, $form_state);

  return $form;
}

/**
 * @addtogroup tmgmt_redirect_queue
 * @{
 */
/**
 * Set a redirect queue that can then be worked through.
 *
 * @param $redirects
 *   An array of redirect url's to be processed. For example checkout pages as
 *   returned by tmgmt_job_checkout_multiple().
 * @param $destination
 *   A final destination to go to after the queue has been processed.
 */
function tmgmt_redirect_queue_set(array $redirects, $destination = NULL) {
  $_SESSION['tmgmt']['redirect_queue'] = $redirects;
  $_SESSION['tmgmt']['destination'] = $destination;
}

/**
 * Returns the redirect queue destination.
 *
 * This is the final destination after all queue items have been processed.
 *
 * @param $destination
 *   The default destination that should be returned if none exists.
 *
 * @return
 *   The stored destination if defined, otherwise the passed in default
 *   destination.
 */
function tmgmt_redirect_queue_destination($destination = NULL) {
  if (!empty($_SESSION['tmgmt']['destination'])) {
    $destination = $_SESSION['tmgmt']['destination'];
    unset($_SESSION['tmgmt']['destination']);
    return $destination;
  }
  return $destination;
}

/**
 * Returns the amount of entries in the redirect queue.
 *
 * @return
 *   The amount of entries in the redirect queue.
 */
function tmgmt_redirect_queue_count() {
  if (!empty($_SESSION['tmgmt']['redirect_queue'])) {
    return count($_SESSION['tmgmt']['redirect_queue']);
  }
  return 0;
}

/**
 * Dequeues one redirect in the queue and returns that.
 *
 * @return
 *   A redirect URL or NULL if the queue is empty.
 */
function tmgmt_redirect_queue_dequeue() {
  if (!empty($_SESSION['tmgmt']['redirect_queue'])) {
    return array_shift($_SESSION['tmgmt']['redirect_queue']);
  }
}
/**
 * @} End of "addtogroup tmgmt_redirect_queue".
 */

/**
 * Provides color legends for source statuses.
 *
 * @return array
 *   Color legend render array.
 */
function tmgmt_color_legend() {
  $output = [
    '#attached' => [
      'library' => ['tmgmt/admin'],
    ]
  ];
  if (\Drupal::theme()->getActiveTheme() == 'seven') {
    $output['#attached']['library'][] = 'tmgmt/admin.seven';
  }

  $legends = array();
  $legends[] = array('legend' => t('Source Language'), 'color' => 'tmgmt-ui-icon-white');
  $legends[] = array('legend' => t('Not translated'), 'color' => 'tmgmt-ui-icon-grey');
  $legends[] = array('legend' => t('In progress'), 'color' => 'tmgmt-ui-icon-blue');
  $legends[] = array('legend' => t('Ready for review'), 'color' => 'tmgmt-ui-icon-yellow');
  $legends[] = array('legend' => t('Translated'), 'color' => 'tmgmt-ui-icon-green');
  $legends[] = array('legend' => t('Translation Outdated'), 'color' => 'tmgmt-ui-icon-orange');

  $output['#markup'] = '<div class="tmgmt-color-legend clearfix">';

  foreach ($legends as $legend){
    $output['#markup'] .= '<div class="tmgmt-one-legend">
        <div class="tmgmt-legend-icon tmgmt-ui-icon tmgmt-ui-icon-10 ' .
      $legend['color'] . '"><span></span></div>
        <div class="tmgmt-legend-status">' . $legend['legend'] . '</div>
        </div>';
  }

  $output['#markup'] .= '</div>';

  return $output;
}

/**
 * Attempts to checkout a number of jobs and prepare the necessary redirects.
 *
 * @param array $form_state
 *   Form state array, used to set the initial redirect.
 * @param array $jobs
 *   Array of jobs to attempt checkout
 *
 * @ingroup tmgmt_job
 *
 * @see tmgmt_job_checkout_multiple()
 */
function tmgmt_job_checkout_and_redirect(FormStateInterface $form_state, array $jobs) {
  $redirects = tmgmt_job_checkout_multiple($jobs);
  // If necessary, do a redirect.
  if ($redirects) {
    $request = \Drupal::request();
    if ($request->query->has('destination')) {
      // Remove existing destination, as that will prevent us from being
      // redirect to the job checkout page. Set the destination as the final
      // redirect instead.
      tmgmt_redirect_queue_set($redirects, $request->query->get('destination'));
      $request->query->remove('destination');
    }
    else {
      tmgmt_redirect_queue_set($redirects, Url::fromRoute('<current>')->getInternalPath());
    }
    $form_state->setRedirectUrl(Url::fromUri('base:' . tmgmt_redirect_queue_dequeue()));

    // Count of the job messages is one less due to the final redirect.
    drupal_set_message(\Drupal::translation()->formatPlural(count($redirects), t('One job needs to be checked out.'), t('@count jobs need to be checked out.')));
  }
}

/**
 * Implements hook_help().
 */
function tmgmt_help($path, $arg) {
  $output = '';
  if (strpos($path, 'admin/tmgmt/sources') !== FALSE) {
    $output = drupal_render(tmgmt_color_legend());
  }

  return $output;
}

/**
 * Helper function for redirecting a form after a button has been clicked.
 */
function tmgmt_submit_redirect(array $form, FormStateInterface $form_state){
  if ($form_state->getTriggeringElement()['#redirect']) {
    $form_state->setRedirectUrl(Url::fromUri('base:' . $form_state->getTriggeringElement()['#redirect']));
  }
}

/**
 * @addtogroup tmgmt_cart
 * @{
 */

/**
 * Returns the cart service.
 *
 * @return \Drupal\tmgmt\JobItemCart
 *   The cart object.
 */
function tmgmt_cart_get() {
  return \Drupal::service('tmgmt.cart');
}

/**
 * Adds add to cart form elements.
 *
 * There are two use cases for this function:
 *
 * 1) Add the "Add to cart" submit action to the source overview form. In this
 * case the $item_id should not be provided and only the action button will be
 * displayed. The form is expected to submit job items ids as items[] which is
 * being validated via tmgmt_source_add_to_cart_validate().
 *
 * 2) Add the "Add to cart" submit action to the translate tab. For this case
 * the $item_id is required and with the add to cart button also the cart
 * information is displayed. In this case there is no validation as the caller
 * needs to provide valid $item_id value.
 *
 * The "Add to cart" action submits the form by calling
 * tmgmt_source_add_to_cart_submit() submit callback which processes either
 * one job item or multiple.
 *
 * @param array $form
 *   Form to which to add the add to cart form elements.
 * @param array $form_state
 *   The current form state object.
 * @param string $plugin
 *   Current plugin name.
 * @param string $item_type
 *   Type of the source item.
 * @param mixed $item_id
 *   (Optional) It is required in case a single source is being added into the
 *   cart.
 */
function tmgmt_add_cart_form(&$form, FormStateInterface $form_state, $plugin, $item_type, $item_id = NULL) {
  $form_state->set('tmgmt_cart', array(
    'plugin' => $plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  ));
  $form['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to cart'),
    '#submit' => array('tmgmt_source_add_to_cart_submit'),
    '#attributes' => array('title' => t('Add marked items to the cart for later processing')),
  );

  if (empty($item_id)) {
    $form['add_to_cart']['#validate'] = array('tmgmt_cart_source_overview_validate');
  }
  else {
    //
    $form['add_to_cart']['#limit_validation_errors'] = array();
    // Compose the cart info message for the translate tab.
    $count = tmgmt_cart_get()->count();
    if (tmgmt_cart_get()->isSourceItemAdded($plugin, $item_type, $item_id)) {
      $form['add_to_cart']['#disabled'] = TRUE;
      $message = \Drupal::translation()->formatPlural($count, 'There is @count item in the <a href="@url">translation cart</a> including the current item.',
        'There are @count items in the <a href="@url">translation cart</a> including the current item.', array('@url' => Url::fromRoute('tmgmt.cart')->toString()));
    }
    else {
      $message = \Drupal::translation()->formatPlural($count, 'There is @count item in the <a href="@url">translation cart</a>.',
        'There are @count items in the <a href="@url">translation cart</a>.', array('@url' => Url::fromRoute('tmgmt.cart')->toString()));
    }

    $form['add_to_cart']['#suffix'] = '<span class="tmgmt-ui-cart-status-message">' . $message . '</span>';
  }
}

/**
 * Submit handler to add items into the cart.
 *
 * Based on the submitted data it will create job items and add them into the
 * cart. Use it in combination with tmgmt_add_cart_form() as that function
 * sets all the necessary values needed to crate a job an add it into the cart.
 *
 * @see tmgmt_add_cart_form()
 */
function tmgmt_source_add_to_cart_submit(array $form, FormStateInterface $form_state) {

  $cart_info = $form_state->get('tmgmt_cart');
  if (!empty($cart_info['plugin']) && !empty($cart_info['item_type']) && $form_state->getValue('items')) {
    $source_items = array_filter($form_state->getValue('items'));
    $item_type = $cart_info['item_type'];
    $plugin = $cart_info['plugin'];
  }
  elseif (!empty($cart_info['plugin']) && !empty($cart_info['item_type']) && !empty($cart_info['item_id'])) {
    $source_items = array($cart_info['item_id']);
    $item_type = $cart_info['item_type'];
    $plugin = $cart_info['plugin'];
  }
  else {
    drupal_set_message(t('Unable to add the content into the cart.'), 'error');
    return;
  }

  $i = 0;
  foreach ($source_items as $source_id) {
    if (tmgmt_cart_get()->addJobItem($plugin, $item_type, $source_id)) {
      $i++;
    }
  }

  drupal_set_message(\Drupal::translation()->formatPlural($i, '@count content source was added into the <a href="@url">cart</a>.',
    '@count content sources were added into the <a href="@url">cart</a>.', array('@url' => Url::fromRoute('tmgmt.cart')->toString())));
}

/**
 * Cart form validation callback for the source overview.
 */
function tmgmt_cart_source_overview_validate(array $form, FormStateInterface $form_state) {
  $items = array_filter($form_state->getValue('items'));
  if (empty($items)) {
    $form_state->setErrorByName('items', t('No job items were selected.'));
  }
}

/**
 * @} End of "addtogroup tmgmt_cart".
 */

