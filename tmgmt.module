<?php

/**
 * Implements hook_entity_info().
 */
function tmgmt_entity_info() {
  $info['tmgmt_job_item'] = array(
    'label' => t('Translation Management Job Item'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobItemController',
    'entity class' => 'TMGMTJobItem',
    'base table' => 'tmgmt_job_item',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjiid',
    ),
  );
  $info['tmgmt_job'] = array(
    'label' => t('Translation Management Job'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobController',
    'entity class' => 'TMGMTJob',
    'base table' => 'tmgmt_job',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjid',
    ),
  );
  $info['tmgmt_translator'] = array(
    'label' => t('Translation Management Translator'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTTranslatorController',
    'entity class' => 'TMGMTTranslator',
    'base table' => 'tmgmt_translator',
    'exportable' => TRUE,
    // @todo: Fix entity api to check if the entitycache module is enabled.
    //'entity cache' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tid',
      'name' => 'name',
      'label' => 'label',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function tmgmt_entity_property_info() {
  $info = array();
  $job_properties = &$info['tmgmt_job']['properties'];

  $job_properties['tjid'] = array(
    'label' => t("Job ID"),
    'type' => 'integer',
    'description' => t("The unique job ID."),
    'schema field' => 'tjid',
  );
  $job_properties['source_language'] = array(
    'label' => t("Source language"),
    'type' => 'text',
    'description' => t("The machine readable name of the source pl"),
    'schema field' => 'source_language',
  	//@todo 'options list' =>
  );
  $job_properties['target_language'] = array(
    'label' => t("Target language"),
    'type' => 'text',
    'description' => t("The language the data should be translated into"),
    'schema field' => 'target_language',
    // @todo 'options list' =>
  );
  $job_properties['state'] = array(
    'label' => t("Job state"),
    'type' => 'integer',
    'description' => t("Current state of a translation job"),
    'schema field' => 'state',
    // @todo 'options list' =>
  );
  $job_properties['created'] = array(
    'label' => t("Create date"),
    'type' => 'integer',
    'description' => t("Creation timestamp of a job"),
    'schema field' => 'created',
  );
  $job_properties['changed'] = array(
    'label' => t("Change date"),
    'type' => 'integer',
    'description' => t("Changed timestamp date of a job"),
    'schema field' => 'changed',
  );
  $job_properties['translator'] = array(
    'label' => t("Translator"),
    'type' => 'text',
    'description' => t('Machine name of the translator'),
    'schema field' => 'translator',
  );
  $job_properties['translator_context'] = array(
    'label' => t("Translator"),
    'type' => 'text',
    'description' => t('Translator specific configuration and context for this job'),
    'schema field' => 'translator_context',
  );
  $job_properties['translator_id'] = array(
    'label' => t("Translator ID"),
    'type' => 'text',
    'description' => t('Remote identifier of this translation job'),
    'schema field' => 'translator_id',
  );
  $job_properties['response'] = array(
    'label' => t("Translator Response"),
    'type' => 'text',
    'description' => t('The response from the translator, e.g. when the order placement fails.'),
    'schema field' => 'response',
  );
  
  $job_item_properties = &$info['tmgmt_job_item']['properties'];
  
  $job_item_properties['tjiid'] = array(
    'label' => t("Job item ID"),
    'type' => 'integer',
    'description' => t('The identifier of the translation job item'),
    'schema field' => 'tjiid',
  );
  $job_item_properties['tjid'] = array(
    'label' => t("Job item ID"),
    'type' => 'integer',
    'description' => t('The foreign key for the translation job record'),
    'schema field' => 'tjid',
  );
  $job_item_properties['plugin'] = array(
    'label' => t("Item plugin"),
    'type' => 'text',
    'description' => t('Indicates the plugin which provides this item'),
    'schema field' => 'plugin',
  );
  $job_item_properties['item_type'] = array(
    'label' => t("Item type"),
    'type' => 'text',
    'description' => t('The type of the item, e.g. the entity type'),
    'schema field' => 'item_type',
  );
  $job_item_properties['item_id'] = array(
    'label' => t("Item ID"),
    'type' => 'integer',
    'description' => t('The unique id (within the given item type) of the item'),
    'schema field' => 'item_id',
  );
  $job_item_properties['translated_data'] = array(
    'label' => t("Translated data"),
    'type' => 'text',
    'description' => t('Structured translated data'),
    'schema field' => 'translated_data',
  );

  $translator_properties = &$info['tmgmt_translator']['properties']
  
  $translator_properties['tid'] = array(
    'label' => t("Translator ID"),
    'type' => 'integer',
    'description' => t('The identifier of the translator'),
    'schema field' => 'tid',
  );
  $translator_properties['name'] = array(
    'label' => t("Name"),
    'type' => 'text',
    'description' => t('Machine name identifier of the translator'),
    'schema field' => 'name',
  );
  $translator_properties['label'] = array(
    'label' => t("Label"),
    'type' => 'text',
    'description' => t('Label of the translator'),
    'schema field' => 'label',
  );
  $translator_properties['plugin'] = array(
    'label' => t("Plugin"),
    'type' => 'text',
    'description' => t('Name of the translator service plugin'),
    'schema field' => 'plugin',
  );
  $translator_properties['settings'] = array(
    'label' => t("Settings"),
    'type' => 'text',
    'description' => t('Translator specific settings'),
    'schema field' => 'settings',
  );
  $translator_properties['status'] = array(
    'label' => t("Status"),
    'type' => 'integer',
    'description' => t('The exportable status of the entity.'),
    'schema field' => 'status',
  );
  $translator_properties['module'] = array(
    'label' => t("Module"),
    'type' => 'text',
    'description' => t('The name of the providing module if the entity has been defined in code.'),
    'schema field' => 'module',
  );
  
  return $info;
}

/**
 * Implements hook_forms().
 */
function tmgmt_forms() {
  $info = array();
  // Give each translator settings form a unique form id.
  foreach (tmgmt_translator_plugin_info() as $plugin => $info) {
    $info['tmgmt_' . $plugin . '_translator_settings_form'] = array(
      'callback' => 'tmgmt_translator_settings_form',
      'wrapper' => 'tmgmt_translator_settings_form_defaults',
    );
  }
  return $info;
}

/**
 * @addtogroup job
 * @{
 */

/**
 * Loads a translation job.
 */
function tmgmt_job_load($tjid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function tmgmt_job_load_multiple(array $tjids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job', $tjids, $conditions, $reset);
}

/**
 * Loads a translation job item.
 */
function tmgmt_job_item_load($tjiid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation job items.
 */
function tmgmt_job_item_load_multiple(array $tjiids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job_item', $tjiids, $conditions, $reset);
}

/**
 * Creates a translation job item.
 *
 * @param $plugin
 *   The plugin name.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $values
 *   Array of additional entity values to be set.
 *
 * @return TMGMTJobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = array()) {
  return entity_create('tmgmt_job_item', array_merge($values, array(
    'plugin' => $plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  )));
}

/**
 * Creates a translation job.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $values
 *   (Optional) Array of additional entity values.
 *
 * @return TMGMTJob
 *   The job entity.
 */
function tmgmt_job_create($source_language, $target_language, array $values = array()) {
  return entity_create('tmgmt_job', array_merge($values, array(
    'source_language' => $source_language,
    'target_language' => $target_language,
  )));
}

/**
 * Add an item to a translation job.
 *
 * @param $job
 *   The translation job.
 * @param $item
 *   The translation job item.
 *
 * @todo Probably it is better to return the return value of the ->save() method
 * here since we might want to check if the item was successfully added to
 * the job.
 *
 * @return TMGMTJobItem
 *   The updated job item.
 */
function tmgmt_job_add_item(TMGMTJob $job, TMGMTJobItem $item) {
  $item->tjid = $job->identifier();
  $item->save();
  return $item;
}

/**
 * @} End of "addtogroup job".
 */

/**
 * @addtogroup translator
 * @{
 */

/**
 * Loads a translator.
 */
function tmgmt_translator_load($tid, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array($tid), array(), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads a translator based on the name.
 */
function tmgmt_translator_load_by_name($name, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array(), array('name' => $name), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_translator_load_multiple(array $tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_translator', $tids, $conditions, $reset);
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 */
function tmgmt_translator_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('translator', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TMGMTTranslatorPluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_translator_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('translator', $plugin);
}

/**
 * @} End of "addtogroup translator".
 */

/**
 * @addtogroup source
 * @{
 */

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function tmgmt_source_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_source_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('source', $plugin);
}

/**
 * @} End of "addtogroup source".
 */

/**
 * Discovers all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function _tmgmt_plugin_info($type, $plugin = NULL) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('tmgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 'tmgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('tmgmt_' . $type . '_plugin_info', $info);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  else if (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function _tmgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = _tmgmt_plugin_info($type, $plugin);
    $class = isset($info['controller class']) ? $info['controller class'] : 'TMGMTDefault' . ucfirst($type) . 'PluginController';
    $cache[$type][$plugin] = new $class($plugin);
  }
  return $cache[$type][$plugin];
}

/**
 * Converts a nested data array into a flattened structure with a combined key.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be joined together using a colon, so for example
 * $data['key1']['key2']['key3'] will be converted into
 * $flattened_data['key1:key2:key3'].
 *
 * @param $data
 *   The nested array structure that should be flattened.
 * @param $prefix
 *   Internal use only, indicates the current key prefix when recursing into
 *   the data array.
 *
 * @return
 *   The flattened data array.
 *
 * @see tmgmt_unflatten_data().
 */
function tmgmt_flatten_data($data, $prefix = NULL) {
  $flattened_data = array();

  // Each element is either a text (has #text property defined) or has children,
  // not both.
  if (!empty($data['#text'])) {
    $flattened_data[$prefix] = $data;
  }
  else {
    $prefix = !empty($prefix) ? $prefix . ':' : '';
    foreach (element_children($data) as $key) {
      $flattened_data += tmgmt_flatten_data($data[$key], $prefix . $key);
    }
  }

  return $flattened_data;
}

/**
 * Converts a flattened data structure into a nested array.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be created based on the colon, so for example
 * $flattened_data['key1:key2:key3'] will be converted into
 * $data['key1']['key2']['key3'].
 *
 * @param $data
 *   The flattened data array.
 *
 * @return
 *   The nested data array.
 *
 * @see tmgmt_flatten_data().
 */
function tmgmt_unflatten_data($flattened_data) {
  $data = array();
  foreach ($flattened_data as $key => $flattened_data_entry) {
    drupal_array_set_nested_value($data, explode(':', $key), $flattened_data_entry);
  }
  return $data;
}

