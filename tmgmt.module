<?php

/**
 * Implements hook_entity_info().
 */
function tmgmt_entity_info() {
  $info['tmgmt_job_item'] = array(
    'label' => t('Translation Management Job Item'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobItemController',
    'entity class' => 'TMGMTJobItem',
    'base table' => 'tmgmt_job_item',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjiid',
    ),
  );
  $info['tmgmt_job'] = array(
    'label' => t('Translation Management Job'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobController',
    'entity class' => 'TMGMTJob',
    'base table' => 'tmgmt_job',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tjid',
    ),
  );
  $info['tmgmt_translator'] = array(
    'label' => t('Translation Management Translator'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTTranslatorController',
    'entity class' => 'TMGMTTranslator',
    'base table' => 'tmgmt_translator',
    'exportable' => TRUE,
    // @todo: Fix entity api to check if the entitycache module is enabled.
    //'entity cache' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'tid',
      'name' => 'name',
      'label' => 'label',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function tmgmt_entity_property_info() {
  $info = array();
  $job_properties = &$info['tmgmt_job']['properties'];

  $job_properties['tjid'] = array(
    'label' => t("Job ID"),
    'type' => 'integer',
    'description' => t("The unique job ID."),
  );
  $job_properties['source_language'] = array(
    'label' => t("Source language"),
    'type' => 'text',
    'description' => t("The machine readable name of the source pl"),
  );
  return $info;
}

/**
 * Implements hook_forms().
 */
function tmgmt_forms() {
  $info = array();
  // Give each translator settings form a unique form id.
  foreach (tmgmt_translator_plugin_info() as $plugin => $info) {
    $info['tmgmt_' . $plugin . '_translator_settings_form'] = array(
      'callback' => 'tmgmt_translator_settings_form',
      'wrapper' => 'tmgmt_translator_settings_form_defaults',
    );
  }
  return $info;
}

/**
 * Loads a translation job.
 */
function tmgmt_job_load($tjid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function tmgmt_job_load_multiple(array $tjids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job', $tjids, $conditions, $reset);
}

/**
 * Loads a translation job item.
 */
function tmgmt_job_item_load($tjiid, $reset = FALSE) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array(), $reset);
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation job items.
 */
function tmgmt_job_item_load_multiple(array $tjiids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_job_item', $tjiids, $conditions, $reset);
}

/**
 * Loads a translator.
 */
function tmgmt_translator_load($tid, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array($tid), array(), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads a translator based on the name.
 */
function tmgmt_translator_load_by_name($name, $reset = FALSE) {
  $translators = tmgmt_translator_load_multiple(array(), array('name' => $name), $reset);
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_translator_load_multiple(array $tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tmgmt_translator', $tids, $conditions, $reset);
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 */
function tmgmt_translator_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TMGMTServicePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_translator_plugin_controller($plugin) {
  return _tmgmt_plugin_controler('source', $plugin);
}

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function tmgmt_source_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Determines the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_source_plugin_controller($plugin) {
  return _tmgmt_plugin_controler('source', $plugin);
}

/**
 * Discovers all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 */
function _tmgmt_plugin_info($type, $plugin = NULL) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('tmgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 'tmgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('tmgmt_' . $type . '_plugin_info', $info);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  else if (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function _tmgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = tmgmt_plugin_info($type, $plugin);
    $class = isset($info['controller class']) ? $info['controller class'] : 'TMGMTDefault' . ucfirst($type) . 'PluginController';
    $cache[$type][$plugin] = new $class($plugin);
  }
  return $cache[$type][$plugin];
}

/**
 * Creates a translation job item.
 *
 * @param $plugin
 *   The plugin name.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $values
 *   Array of additional entity values to be set.
 *
 * @return TMGMTJobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = array()) {
  return entity_create('tmgmt_job_item', array_merge($values, array(
    'plugin' => $plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  )));
}

/**
 * Creates a translation job.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $values
 *   (Optional) Array of additional entity values.
 *
 * @return TMGMTJob
 *   The job entity.
 */
function tmgmt_job_create($source_language, $target_language, array $values = array()) {
  return entity_create('tmgmt_job', array_merge($values, array(
    'source_language' => $source_language,
    'target_language' => $target_language,
  )));
}

/**
 * Add an item to a translation job.
 *
 * @param $job
 *   The translation job.
 * @param $item
 *   The translation job item.
 *
 * @return TMGMTJobItem
 *   The updated job item.
 */
function tmgmt_job_add_item(TMGMTJob $job, TMGMTJobItem $item) {
  $item->tjid = $job->identifier();
  $item->save();
  return $item;
}