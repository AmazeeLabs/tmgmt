<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_html_tmgmt_translator_plugin_info() {
  return array(
    'html_translator' => array(
      'label' => t('HTML translator'),
      'description' => t('HTML translator that exports to HTML.'),
      'controller class' => 'TMGMTHTMLTranslator',
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Creates template file for Campaign Statistics block. The template may also
 * be moved under the current theme directory.
 */
function tmgmt_html_theme($existing, $type, $theme, $path) {
  return array(
    'html_template' => array(
      'path'  => drupal_get_path('module', 'tmgmt_html') . '/templates',
      'template'  => 'html_template',
    ),
    'xliff_template' => array(
      'path'  => drupal_get_path('module', 'tmgmt_html') . '/templates',
      'template'  => 'xliff_template',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_html_menu() {
  $items['html_translator/import'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'HTML Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_html_import_form'),
  	'access callback' => TRUE,
  );
  return $items;
}

/**
 * Import form.
 */
function tmgmt_html_import_form($form) {
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('HTML'),
    '#size' => 50,
    '#description' => t('A translated HTML File'),
  );

  $form['file_type'] = array(
    '#type' => 'radios',
    '#title' => t('File type'),
    '#options' => array(
        'html' => t('HTML'),
        'xliff' => t('XLIFF')),
    '#default_value' => 'html',
    '#description' => t('Please select the file type you want to import.'),
  );

  $form['import']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

/**
 * Import form submit callback.
 */
function tmgmt_html_import_form_submit($form, &$form_state) {
  // Ensure we have the file uploaded
  if ($file = file_save_upload('file', array('file_validate_extensions' => array('html')))) {
    $html = file_get_contents($file->uri);
    $html_obj = new simple_html_dom();
    $html_obj->load($html);
    $JobID = $html_obj->find('meta[name=JobID]',0)->content;
    $source_language = $html_obj->find('meta[name=languageSource]',0)->content;
    $target_language = $html_obj->find('meta[name=languageTarget]',0)->content;
    if (empty($JobID) && !is_numeric($JobID)) {
      drupal_set_message(t('No JobID found'),'error');
      return;
    }
    if (empty($source_language)) {
      drupal_set_message(t('No languageSource found'),'error');
      return;
    }
    if (empty($target_language)) {
      drupal_set_message(t('No languageTarget found'),'error');
      return;
    }

    $job = tmgmt_job_load($JobID);

    if ($job->source_language != $source_language) {
      drupal_set_message(t('Source language of file does not match source language of job'),'error');
      return;
    }

    if ($job->target_language != $target_language) {
      drupal_set_message(t('Target language of file does not match target language of job'),'error');
      return;
    }

    $items = $job->getItems();

    foreach($html_obj->find('div.asset') as $asset) {
      //assets are our jobitem ids
      if (!isset($items[$asset->id])) {
        drupal_set_message(t('Job item: @jobitem does not exist',array('@jobitem' => $asset->id)),'error');
        continue;
      }
      $item = $items[$asset->id];
      unset($items[$asset->id]);
      $SourceDataArray = tmgmt_flatten_data($item->getSourceData());
      foreach($asset->find('div.atom') as $atom) {
        //assets are our strings (eq fields in nodes)
        if (!isset($SourceDataArray[$atom->id])) {
          drupal_set_message(t('String item: @stringitem does not exist',array('@stringitem' => $atom->id)),'error');
          continue;
        }
        $SourceDataArray[$atom->id]['#text'] = $atom->innertext;
      }
      $item->addTranslatedData(tmgmt_unflatten_data($SourceDataArray));
    }
    if (!empty($items)) {
      drupal_set_message(t('There where missing translations for these Job items: @jobitems',array('@jobitems' => implode(", ", array_keys($items)))),'error');
    }
    drupal_set_message(t("Translation for Job: @jobid imported",array('@jobid' => $JobID)));
    $job->needsReview('Translation imported');
  }
}
