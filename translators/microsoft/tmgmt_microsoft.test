<?php

/**
 * @file
 * Test cases for the microsoft translator module.
 */

/**
 * Basic tests for the microsoft translator.
 */
class TMGMTMicrosoftTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Microsoft Translator tests'),
      'description' => t('Tests the microsoft translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_microsoft', 'tmgmt_microsoft_test'));
  }

  /**
   * Tests basic API methods of the plugin.
   */
  function testMicrosoft() {
    $translator = $this->createTranslator();
    $translator->translator_plugin = 'microsoft';
    $translator->settings = array(
      'url' => url('tmgmt_microsoft_mock/v2/Http.svc', array('absolute' => TRUE)),
    );
    $translator->save();

    $job = $this->createJob();
    $job->translator = $translator->name;
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#text' => 'Hello world',
      ),
    );
    $item->save();
    // We didn't define a API key, so let's check whether it now matches the
    // default setting.
    $settings = $job->getTranslatorController()->defaultTranslatorSettings();
    $this->assertEqual($settings['api'], $job->getTranslator()->getSetting('api'));
    $this->assertTrue($job->isTranslatable());

    // Save a wrong api key.
    $translator->settings['api'] = 'wrong key';
    $translator->save();

    // @todo Actually check if the api key is valid.
    $this->assertTrue($job->isTranslatable());
    $job->requestTranslation();

    // Should have been rejected due to the wrong api key.
    $this->assertTrue($job->isRejected());
    $messages = $job->getMessages();
    $message = end($messages);
    $this->assertEqual('error', $message->type);
    $this->assertEqual('Rejected by Microsoft Translator: Wrong API Key', $message->getMessage());

    // Save a correct api key.
    $translator->settings['api'] = 'correct key';
    $translator->save();
    $this->assertTrue($job->isTranslatable());

    $job->requestTranslation();

    // Now it should be needs review.
    $this->assertTrue($job->isNeedsReview());
    $items = $job->getItems();
    $item = end($items);
    $this->assertEqual('de_Hello world', $item->translation['wrapper']['#text']);
  }

}
