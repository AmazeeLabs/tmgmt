<?php

/**
 * @file
 * Module file of the translation management test module.
 */

// A directory to save received email attachments.
define('TMGMT_FILE_EMAIL_ATTACHMENTS_DIR', 'private://tmgmt_file_email_attachments');

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_file_tmgmt_translator_plugin_info() {
  return array(
    'file' => array(
      'label' => t('File translator'),
      'description' => t('File translator that exports and imports files.'),
      'plugin controller class' => 'TMGMTFileTranslatorPluginController',
      'ui controller class' => 'TMGMTFileTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function tmgmt_file_cron() {
  module_load_include('cron.inc', 'tmgmt_file');
  _tmgmt_file_check_mailboxes();
}

/**
 * Implements hook_theme().
 */
function tmgmt_file_theme() {
  return array(
    'tmgmt_file_html_template' => array(
      'path' => drupal_get_path('module', 'tmgmt_file') . '/templates',
      'template' => 'tmgmt_file_html_template',
    ),
  );
}

/**
 * Implements hook_mail().
 */
function tmgmt_file_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
  if (isset($params['attachments'])) {
    $message['params']['attachments'] = $params['attachments'];
  }
}

/**
 * Import form submit callback.
 */
function tmgmt_file_import_form_submit($form, &$form_state) {
  // Ensure we have the file uploaded.
  $job = $form_state['tmgmt_job'];
  $supported_formats = array_keys(tmgmt_file_format_plugin_info());
  if ($file = file_save_upload('file', array('file_validate_extensions' => array(implode(' ', $supported_formats))))) {
    $extension = pathinfo($file->uri, PATHINFO_EXTENSION);
    $controller = tmgmt_file_format_controller($extension);
    if ($controller) {
      // Validate the file on job.
      $validated_job = $controller->validateImport($file->uri, $job);
      if (!$validated_job) {
        $job->addMessage('Failed to validate file, import aborted.', array(), 'error');
      }
      elseif ($validated_job->tjid != $job->tjid) {
        $job->addMessage('The imported file job id @file_tjid does not match the job id @job_tjid.', array(
          '@file_tjid' => $validated_job->tjid,
          '@job_tjid' => $job->tjid,
        ), 'error');
      }
      else {
        try {
          // Validation successful, start import.
          $job->addTranslatedData($controller->import($file->uri));
          $job->addMessage('Successfully imported file.');
        } catch (Exception $e) {
          $job->addMessage('File import failed with the following message: @message', array('@message' => $e->getMessage()), 'error');
        }
      }
    }
  }
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->type == 'debug') {
      continue;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(filter_xss($text), $message->type);
    }
  }
}

/**
 * Returns information about file format plugins.
 *
 * @param $plugin
 *   (Optional) Name of a plugin/extension.
 *
 * @return array
 *   If a plugin name is provided, information about that plugin, an array of
 *   plugin information otherwise. The information of each plugin consists of
 *   the label and plugin controller class, keyed by the plugin name which is
 *   also the extension for that file format.
 */
function tmgmt_file_format_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('file_format', $plugin);
}

/**
 * Returns an array of file format plugin labels.
 */
function tmgmt_file_format_plugin_labels() {
  return _tmgmt_plugin_labels('file_format');
}

/**
 * Returns the file format plugin controller.
 *
 * @param $plugin
 *   (Optional) Name of a plugin/extension.
 *
 * @return TMGMTFileFormatInterface
 *   Either a specific file format plugin controller instance or an array of
 *   available controllers.
 */
function tmgmt_file_format_controller($plugin = NULL) {
  return _tmgmt_plugin_controller('file_format', $plugin);
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function tmgmt_file_tmgmt_file_format_plugin_info() {
  return array(
    'xlf' => array(
      'label' => t('XLIFF'),
      'plugin controller class' => 'TMGMTFileFormatXLIFF',
    ),
    'html' => array(
      'label' => t('HTML'),
      'plugin controller class' => 'TMGMTFileFormatHTML',
    ),
  );
}

/**
 * Implements hook_tmgmt_job_delete().
 */
function tmgmt_file_tmgmt_job_delete(TMGMTJob $job) {
  $translator = $job->getTranslator();

  // Ignore jobs that don't have a file translator.
  if (!$translator || $translator->plugin != 'file') {
    return;
  }
  // Check if there are any files that need to be deleted.
  // @todo There doesn't seem to be an API function for this...
  $args = array(
    ':module' => 'tmgmt_file',
    ':type' => 'tmgmt_job',
    ':id' => $job->tjid,
  );
  $result = db_query('SELECT fid FROM {file_usage} WHERE module = :module and type = :type and id = :id', $args);
  $fids = $result->fetchCol();
  if (!empty($fids)) {
    foreach (file_load_multiple($fids) as $file) {
      file_usage_delete($file, 'tmgmt_file', 'tmgmt_job', $job->tjid);
      // It is very unlikely that these files are used anywhere else. Delete it.
      file_delete($file);
    }
  }
}

/**
 * Implements hook_file_download().
 */
function tmgmt_file_file_download($uri) {
   // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  if (count($files)) {
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->uri === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Check if this file belongs to a job.
  $usage_list = file_usage_list($file);
  if (!isset($usage_list['tmgmt_file']['tmgmt_job'])) {
    return;
  }

  foreach (tmgmt_job_load_multiple(array_keys($usage_list['tmgmt_file']['tmgmt_job'])) as $job) {
    if (tmgmt_job_access('view', $job)) {
      // Access is granted.
      $headers = file_get_content_headers($file);
      return $headers;
    }
  }

  // Returning nothing means access denied unless another module specifically
  // grants access.
}

/**
 * Returns a mailbox object. Already connected.
 *
 * @param $imap_path
 *   The $mailbox parameter pf the imap_open() function.
 * @param $imap_username
 * @param $imap_password
 *
 * @return \PhpImap\Mailbox
 *
 * @throws \Exception
 *
 * @see imap_open()
 */
function tmgmt_file_mailbox($imap_path, $imap_username, $imap_password) {
  if (!extension_loaded('imap')) {
    throw new Exception('The IMAP PHP extension is not installed.');
  }
  if (!class_exists('\PhpImap\Mailbox')) {
    throw new Exception('The php-imap/php-imap composer library is not installed.');
  }

  // See https://github.com/barbushin/php-imap/issues/184
  $encoding = strpos($imap_path, '{outlook.office365.com') === 0
    ? 'US-ASCII'
    : 'UTF-8';

  $mailbox = new \PhpImap\Mailbox($imap_path, $imap_username, $imap_password, drupal_realpath(file_directory_temp()), $encoding);
  $mailbox->setConnectionArgs(0, 1, array());
  $mailbox->getImapStream();
  return $mailbox;
}

/**
 * Validation handler for the "email" element.
 *
 * @see \TMGMTFileTranslatorUIController::pluginSettingsForm()
 */
function _tmgmt_file_validate_email_settings_element(&$element) {
  if ($element['sending_enabled']['#value']) {
    $mapping = array();
    try {
      $mapping = _tmgmt_file_email_sending_parse_mapping($element['sending']['mapping']['#value']);
    }
    catch (Exception $e) {
      form_error($element['sending']['mapping'], t('Mapping: @error', array('@error' => $e->getMessage())));
    }
    if (empty($mapping)) {
      form_error($element['sending']['mapping'], t('!name field is required', array('!name' => $element['sending']['mapping']['#title'])));
    }
  }

  if ($element['receiving_enabled']['#value']) {
    try {
      tmgmt_file_mailbox($element['receiving']['imap_path']['#value'], $element['receiving']['imap_username']['#value'], $element['receiving']['imap_password']['#value']);
    }
    catch (Exception $e) {
      form_error($element['receiving'], t('Cannot connect to mailbox: @error', array('@error' => $e->getMessage())));
    }
  }
}

/**
 * Captures new error messages.
 *
 * @return array
 *   An array of new error messages since the last function call.
 */
function _tmgmt_file_get_new_error_messages() {
  static $past_error_messages = array();
  $error_messages = isset($_SESSION['messages']['error']) ? $_SESSION['messages']['error'] : array();
  $ret = array_diff_key($error_messages, $past_error_messages);
  $past_error_messages = $error_messages;
  return $ret;
}

/**
 * Parses Email sending mapping.
 *
 * @param string $mapping
 *
 * @return array
 *   Keys are target langcodes, values are email addresses.
 *
 * @throws \Exception
 *
 * @see \TMGMTFileTranslatorUIController::pluginSettingsForm()
 */
function _tmgmt_file_email_sending_parse_mapping($mapping) {
  $langcodes = array_keys(language_list());
  $ret = array();
  foreach (explode("\n", $mapping) as $string) {
    if (trim($string) !== '') {
      @list($target_langcode, $email_address) = array_map('trim', explode(':', $string, 2));
      if (!in_array($target_langcode, $langcodes)) {
        throw new Exception(t('"@langcode" langcode is unknown.', array('@langcode' => $target_langcode)));
      }
      $email_addresses = array_map('trim', explode(',', $email_address));
      foreach ($email_addresses as $email_address_to_test) {
        if (!valid_email_address($email_address_to_test)) {
          throw new Exception(t('"@email" email address is not valid.', array('@email' => $email_address_to_test)));
        }
      }
      $ret[$target_langcode] = $email_address;
    }
  }
  return $ret;
}
