<?php

/**
 * @file
 * UI plugin for the Translation Management system that handles i18n strings.
 */

/**
 * Implements hook_menu()
 */
function tmgmt_ui_simple_menu() {
  $items['admin/config/regional/tmgmt/simple'] = array(
    'title' => 'Simple UI',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_ui_simple_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items['translate/multiple/node'] = array(
    'page callback' => 'tmgmt_ui_simple_page_translate_node_multiple',
    'access arguments' => array('translate content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Basic settings
 */
function tmgmt_ui_simple_settings_form($form, &$form_state) {
  $form['tmgmt_ui_simple_default_queue'] = array(
    '#title' => t('Queue jobs'),
    '#type' => 'radios',
    '#options' => array(t('Disabled'), t('Enabled')),
    '#default_value' => variable_get('tmgmt_ui_simple_default_queue', 1),
  );
  return system_settings_form($form);
}
/**
 * Translate multiple items
 */
function tmgmt_ui_simple_page_translate_node_multiple($ids) {
  $item_ids = explode('+', $ids);
  $params = array(
    'source_plugin' => 'node',
    'item_type' => 'node',
    'source_language' => $GLOBALS['language']->language,
  );
  $items = array();
  foreach ($item_ids as $id) {
    if ($node = node_load($id)) {
      $items[$node->nid] = l($node->title, 'node/' . $node->nid);
    }
  }
  return drupal_get_form('tmgmt_ui_simple_translate_list_form', $params, $items);
}

/**
 * Implements hook_form_FORMID_alter
 * Add submission capabilities to string forms.
 */
function tmgmt_ui_simple_form_i18n_string_translate_page_overview_form_alter(&$form, &$form_state) {
  $object = $form['object']['#value'];
  $form['source_plugin'] = array('#type' => 'value', '#value' => 'i18n_string');
  $form['item_type'] = array('#type' => 'value', '#value' => 'i18n_string');
  $object_key = $object->get_key();
  $item_id = $object->get_type() . ':' . (is_array($object_key) ? implode(':', $object_key) : $object_key);
  $form['item_id'] = array('#type' => 'value', '#value' => $item_id);
  $form['languages'] = array(
    '#options' => $form['languages']['#rows'],
    '#header' => $form['languages']['#header'],
    '#type' => 'tableselect',
  );
  $form['controls'] = tmgmt_ui_simple_controls_element($form, $form_state);
  $form['#submit'][] = 'tmgmt_ui_simple_translate_form_submit';
}

/**
 * Implements hook_page_alter().
 */
function tmgmt_ui_simple_page_alter(&$page) {
  // Translation tabs for nodes.
  if (module_exists('tmgmt_node') && isset($page['content']['system_main']['translation_node_overview']) && ($node = menu_get_object())) {
    $page['content']['system_main']['translation_node_overview'] = drupal_get_form('tmgmt_ui_simple_node_form', $node, $page['content']['system_main']['translation_node_overview']);
  }
}

/**
 * Node overview form
 */
function tmgmt_ui_simple_node_form($form, &$form_state, $node, $original) {
  $form['object'] = array('#type' => 'value', '#value' => $node);
  $form['source_plugin'] = array('#type' => 'value', '#value' => 'node');
  $form['item_type'] = array('#type' => 'value', '#value' => 'node');
  $form['item_id'] = array('#type' => 'value', '#value' => $node->nid);
  $form['source_language'] = array('#type' => 'value', '#value' => $node->language);
  $form['languages'] = array(
    '#type' => 'tableselect',
    '#header' => $original['#header'],
    '#options' => array(),
  );
  // As keys are numeric, we assume languages are in the same order, need to rekey rows
  $language_list = module_exists('i18n_node') ? i18n_node_language_list($node) : locale_language_list();
  foreach ($language_list as $langcode => $language_name) {
    if ($langcode == LANGUAGE_NONE) {
      // Never show language neutral on the overview.
      continue;
    }
    $form['languages']['#options'][$langcode] = array_shift($original['#rows']);
  }
  $form['controls'] = tmgmt_ui_simple_controls_element($form, $form_state);
  $form['#submit'][] = 'tmgmt_ui_simple_translate_form_submit';
  return $form;
}

/**
 * Node overview submission form
 */
function tmgmt_ui_simple_translate_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if ($languages = array_filter($values['languages'])) {
    // Request a job for every selected language
    $count = 0;
    foreach (array_keys($languages) as $langcode) {
      $count++;
      // Create the job object.
      $job = tmgmt_job_create($values['source_language'], $langcode, array('translator' => $values['translator']));
      // Create job items and add them to the job. This may take a single value or an array of item_id's.
      $items = is_array($values['item_id']) ? $values['item_id'] : array($values['item_id']);
      foreach ($items as $item_id) {
        $job->addItem($values['source_plugin'], $values['item_type'], $item_id);
      }
      $job->save();
      if (!variable_get('tmgmt_ui_simple_default_queue', 1)) {
        $job->requestTranslation();
      }
      // Print a message to the screen and redirect the user.
    }
    drupal_set_message(format_plural($count, 'A translation job has been created.', '@count translation jobs have been created.'));
  }
  else {
    drupal_set_message(t('You need to select one or more languages for requesting a translation.'), 'warning');
  }
}

/**
 * Subform for selecting translation method.
 */
function tmgmt_ui_simple_controls_element($form, &$form_state) {
  $element = array('#type' => 'fieldset');
  $translator_plugins = tmgmt_translator_plugin_labels(TRUE);
  $translator_plugins_keyed = array_keys($translator_plugins);
  $selected_translator_plugin = isset($form_state['values']['translator']) ? $form_state['values']['translator'] : reset($translator_plugins_keyed);
  $element['translator'] = array(
    '#type' => 'select',
    '#title' => t('Translation type'),
    '#options' => $translator_plugins,
    '#default_value' => $selected_translator_plugin,
  );
  $element['request'] = array('#type' => 'submit', '#value' => t('Request translation'));
  return $element;
}

/**
 * Form for requesting translation for multiple items of the same type.
 *
 * @param $params
 *   Values to add to the form Plugin, Item type, etc
 * @param $items
 *   Array of item names indexed by item_id. Titles must be sanitized
 */
function tmgmt_ui_simple_translate_list_form($form, &$form_state, $params, $items) {
  // Store parameters and item ids
  $params['item_id'] = array_keys($items);
  foreach ($params as $name => $value) {
    $form[$name] = array('#type' => 'value', '#value' => $value);
  }
  // Display items
  $form['items'] = array(
    '#title' => t('Translate items'),
    '#type' => 'item',
    '#markup' => theme('item_list', array('items' => $items)),
  );
  // Select languages.
  foreach (locale_language_list() as $langcode => $name) {
    if ($langcode != $params['source_language']) {
      $rows[$langcode] = array(check_plain($name));
    }
  }
  $form['languages'] = array(
    '#type' => 'tableselect',
    '#header' => array(t('Select languages')),
    '#options' => $rows,
  );
  $form['controls'] = tmgmt_ui_simple_controls_element($form, $form_state);
  $form['#submit'][] = 'tmgmt_ui_simple_translate_form_submit';
  return $form;
}

/**
 * Implements hook_node_operations().
 */
function tmgmt_ui_simple_node_operations() {
  if (module_exists('tgmt_node')) {
    $operations = array(
      'translate_simple' => array(
        'label' => t('Translate selected content'),
        'callback' => 'tmgmt_ui_simple_translate_node_multiple',
      ),
    );
    return $operations;
  }
}

/**
 * Node operations callback
 */
function tmgmt_ui_simple_translate_node_multiple($nodes) {
  $path = 'translate/multiple/node/' . implode('+', $nodes);
  drupal_goto($path);
}
