<?php

/*
 * @file
 * Contains tests for the default user interface.
 */

/**
 * Test the userinterface of tmgmt, for example the checkout form.
 */
class TMGMTUITestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('UI tests'),
      'description' => t('Verifies basic functionality of the user interface'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_file'));
  }

  /**
   * Test the page callbacks to create jobs and check them out.
   */
  function testCheckoutForm() {

    $this->admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'administer taxonomy'));
    $this->drupalLogin($this->admin_user);
    $this->setEnvironment('de');
    $this->setEnvironment('es');
    $this->setEnvironment('el');

    $user = $this->drupalCreateUser(array('access administration pages', 'access tmgmt ui'));
    $this->drupalLogin($user);

    // Add a first item to the job. This will auto-create the job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

    // Check checkout form.
    $this->assertText('test_source:test:1');

    // Add two more job items.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/2,3/' . $tjid);

    // Check checkout form.
    $this->assertText('test_source:test:1');
    $this->assertText('test_source:test:2');
    $this->assertText('test_source:test:3');

    // Attempt to add item from a different source language.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/en/test_source/test/4/' . $tjid);

    // Check checkout form.
    $this->assertText("The source language of your item doesn't match the source language of your job.");
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');
    $this->assertText('test_source:test:2');
    $this->assertText('test_source:test:3');
    $this->assertText('German');
    $this->assertText($this->default_translator->label);

    // @todo: Test ajax functionality.

    // Attempt to translate into english.
    $edit = array(
      'target_language' => 'el',
      'settings[action]' => 'translate',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('@translator can not translate from @source to @target.', array('@translator' => 'Test translator (auto created)', '@source' => 'German', '@target' => 'Greek')));

    // Job still needs to be in state new.
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isUnprocessed());

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'translate',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));

    // Job needs to be in state review.
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isNeedsReview());
    $this->assertText(t('Test translation created'));
    $this->assertNoText(t('Test translator called'));

    // Test redirection.
    $this->assertText(t('Translation Management'));

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'submit',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('Test submit'));
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isActive());

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'reject',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('This is not supported'));
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isRejected());

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'fail',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('Service not reachable'));
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isUnprocessed());

    // Verify that we are still on the form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'not_translatable',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    // @todo Update to correct failure message.
    $this->assertText(t('Fail'));
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isUnprocessed());

    // Attempt to add items to a non-existing job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/en/test_source/test/5/' . ($tjid + 1));
    $this->assertResponse(404);
  }

  /**
   * Tests the tmgmt_ui_job_checkout() function.
   */
  function testCheckoutFunction() {
    $job = $this->createJob();

    // Check out a job when only the test translator is available. That one has
    // settings, so a checkout is necessary.
    $redirect = tmgmt_ui_job_checkout(array($job));
    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isUnprocessed());
    $job->delete();

    // Hide settings on the test translator.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $job = $this->createJob();

    $redirect = tmgmt_ui_job_checkout(array($job));
    $this->assertFalse($redirect);
    $this->assertTrue($job->isNeedsReview());

    // A job without target language needs to be checked out.
    $job = $this->createJob('en', '');
    $redirect = tmgmt_ui_job_checkout(array($job));    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isUnprocessed());

    // Create a second file translator. This should check
    // out immediatly.
    $job = $this->createJob();

    $second_translator = $this->createTranslator();
    $second_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $second_translator->save();

    $redirect = tmgmt_ui_job_checkout(array($job));
    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isUnprocessed());
  }
}
