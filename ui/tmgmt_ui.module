<?php

/**
 * @file
 * Common Translation managment UI.
 */

/**
 * Implements hook_entity_info().
 */
function tmgmt_ui_entity_info() {
  $info['tmgmt_translator'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTTranslatorUIController',
      'path' => 'admin/config/regional/tmgmt/translators',
    ),
  );
  $info['tmgmt_job'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobUIController',
      'path' => 'admin/config/regional/tmgmt/jobs',
    ),
  );
  $info['tmgmt_job_item'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobItemUIController',
      'path' => 'admin/config/regional/tmgmt/jobs/%/items',
    ),
  );
  foreach ($info as $key => $item) {
    // Entity API defaults to the path that implements the entity type, but
    // since this happens in the TMGMT core module, we need to manually
    // define the path here.
    $info[$key]['admin ui']['file path'] = drupal_get_path('module', 'tmgmt_ui');
    $info[$key]['admin ui']['file'] = 'includes/tmgmt_ui.admin.inc';
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function tmgmt_ui_menu() {
  $items['admin/config/regional/tmgmt'] = array(
    'title' => 'Translation Management',
    'description' => 'Use the Translation Management',
    'page callback' => 'tmgmt_ui_content',
    'access arguments' => array('administer tmgmt'),
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/config/regional/tmgmt/overview'] = array(
    'title' => 'Overview',
    'page callback' => 'tmgmt_ui_content',
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
    'weight' => -10,
  );
  $items['admin/config/regional/tmgmt/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'tmgmt_ui_settings',
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
    'weight' => 10,
  );
  $items['admin/config/regional/tmgmt/add-item/%/%/%/%'] = array(
    'title' => 'Create a Job',
    'page callback' => 'tmgmt_job_add_item',
    'page arguments' => array(5, 6, 7, 8),
    'access arguments' => array('administer tmgmt'),
    'file' => 'includes/tmgmt_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function tmgmt_ui_theme() {
  return array(
    'tmgmt_ui_translator_overview_item' => array(
      // We also have the entity_type here because we are still populating the
      // defaults via the entity api so we just need to add the description.
      'variables' => array('label' => NULL, 'entity_type' => NULL, 'url' => FALSE, 'name' => FALSE, 'description' => FALSE),
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
    'tmgmt_ui_translator_overview_form' => array(
      'render element' => 'form',
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 */
function tmgmt_ui_system_info_alter(&$info, $file, $type) {
  if ($file->name == 'tmgmt') {
    $info['configure'] = 'admin/config/regional/tmgmt/settings';
  }
}

/**
 * Implements hook_views_api().
 */
function tmgmt_ui_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_ui_views_default_views() {
  return _tmgmt_load_exports('tmgmt_ui', 'views', 'view.inc', 'view');
}

/**
 * Add a class class to the cart view.
 */
function tmgmt_ui_views_pre_render($view) {
  if ($view->name == 'tmgmt_ui_cart_overview' && $view->current_display == 'block_1') {
    drupal_add_css(drupal_get_path('module', 'tmgmt_ui') . '/css/tmgmt_ui.cart.css');
  }
}

/**
 * Attempts to check out a number of jobs.
 *
 * Performs a number of checks on each job and also allows to alter the behavior
 * through hooks.
 *
 * @param $jobs
 *   The jobs to be checked out.
 * @return string
 */
function tmgmt_ui_job_checkout(array $jobs) {
  $redirects = array();
  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  drupal_alter('tmgmt_ui_job_checkout_before', $redirects, $jobs);

  foreach ($jobs as $job) {
    if (!$job->isUnprocessed()) {
      // Job is already checked out, just ignore that one. This could happen
      // if jobs have already been submitted in the before hook.
      continue;
    }

    // @todo: Add permission checks.

    if (tmgmt_ui_job_needs_checkout_form($job)) {
      $uri = $job->uri();
      $redirects[] = $uri['path'] . '/manage';
    }
    else {
      // @todo this is dangerous because we don't catch request fails at all.
      // Normally I would expect this to catch all failed requests and
      // afterwards send the user through a multistep form which contains the
      // failed elements.

      // No manual checkout required. Request translations now.
      tmgmt_ui_job_request_translation($job);
    }
  }

  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  drupal_alter('tmgmt_ui_job_checkout_after', $redirects, $jobs);

  // @todo Find a way to deal with multi-redirects.
  return $redirects ? reset($redirects) : FALSE;
}

/**
 * Check if a job needs a checkout form.
 *
 * The current checks include if there is more than one translator available,
 * if he has settings and if the job has a fixed target language.
 *
 * @return
 *   TRUE if the job needs a checkout form.
 */
function tmgmt_ui_job_needs_checkout_form(TMGMTJob $job) {
  // If the job has no target language (or source language, even though this
  // should never be the case in our use case), checkout is mandatory.
  if (empty($job->target_language) || empty($job->source_language)) {
    return TRUE;
  }
  // If there is more than a single translator available or if there are no
  // translators available at all checkout is mandatory.
  $translators = tmgmt_translator_load_available($job->source_language, $job->target_language);
  if (empty($translators) || count($translators) > 1) {
    return TRUE;
  }
  $translator = reset($translators);
  $job->translator = $translator->name;
  // If that translator has settings, the checkout is mandatory.
  if ($translator->hasCheckoutSettings($job)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Requests translations for a job and prints messages which have happened since
 * then.
 *
 * @param TMGMTJob $job
 *   The job object for which translations should be requested.
 *
 * @return
 *   TRUE if it worked, FALSE if there were any errors of the type error which
 *   means that something did go wrong.
 */
function tmgmt_ui_job_request_translation(TMGMTJob $job) {
  // Process the translation request.
  $job->requestTranslation();
  // Print all messages that occurred since our request to the screen.
  $errors = FALSE;
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->type == 'debug') {
      continue;
    }
    if ($message->type == 'error') {
      $errors = TRUE;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(filter_xss($text), $message->type);
    }
  }
  return !$errors;
}
