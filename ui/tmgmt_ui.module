<?php

/**
 * @file
 * Common Translation managment UI.
 */

/**
 * Implements hook_entity_info().
 */
function tmgmt_ui_entity_info() {
  $info['tmgmt_translator'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTTranslatorUIController',
      'path' => 'admin/config/regional/tmgmt/translators',
    ),
  );
  $info['tmgmt_job'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobUIController',
      'path' => 'admin/config/regional/tmgmt/jobs',
    ),
  );
  $info['tmgmt_job_item'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobItemUIController',
      'path' => 'admin/config/regional/tmgmt/items',
    ),
  );
  foreach ($info as $key => $item) {
    // Entity API defaults to the path that implements the entity type, but
    // since this happens in the TMGMT core module, we need to manually
    // define the path here.
    $info[$key]['admin ui']['file path'] = drupal_get_path('module', 'tmgmt_ui');
    $info[$key]['admin ui']['file'] = 'includes/tmgmt_ui.pages.inc';
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function tmgmt_ui_menu() {
  $items['admin/config/regional/tmgmt'] = array(
    'title' => 'Translation Management',
    'description' => 'Use the Translation Management',
    'page callback' => 'tmgmt_ui_overview_page',
    'access arguments' => array('administer tmgmt'),
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/config/regional/tmgmt/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/regional/tmgmt/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_ui_settings_form'),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
    'weight' => 10,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function tmgmt_ui_theme() {
  return array(
    'tmgmt_ui_translator_overview_item' => array(
      // We also have the entity_type here because we are still populating the
      // defaults via the entity api so we just need to add the description.
      'variables' => array('label' => NULL, 'entity_type' => NULL, 'url' => FALSE, 'name' => FALSE, 'description' => FALSE),
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
    'tmgmt_ui_translator_overview_form' => array(
      'render element' => 'form',
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function tmgmt_ui_forms() {
  $forms = array();
  foreach (tmgmt_source_plugin_info() as $plugin => $info) {
    $forms['tmgmt_ui_' . $plugin . '_translation_review_form'] = array(
      'callback' => 'tmgmt_ui_translation_review_form',
      'wrapper_callback' => 'tmgmt_ui_translation_review_form_defaults',
    );
  }
  return $forms;
}

/**
 * Implements hook_system_info_alter().
 */
function tmgmt_ui_system_info_alter(&$info, $file, $type) {
  if ($file->name == 'tmgmt') {
    $info['configure'] = 'admin/config/regional/tmgmt/settings';
  }
}

/**
 * Implements hook_views_api().
 */
function tmgmt_ui_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_ui_views_default_views() {
  return _tmgmt_load_exports('tmgmt_ui', 'views', 'view.inc', 'view');
}

/**
 * Embed a view but don't render it if it's empty.
 *
 * @param $view
 *   The machine-readable name of the view.
 *
 * @return
 *   The rendered view or an empty string if the view doesn't exist if it was
 *   empty.
 */
function tmgmt_ui_embed_view($view) {
  $view = views_get_view($view);
  if (!empty($view)) {
    $view->init_display();
    $output = $view->preview();
    if (!empty($view->result)) {
      return $output;
    }
  }
  return '';
}

/**
 * Attempts to check out a number of jobs.
 *
 * @param $jobs
 *   The jobs to be checked out.
 * @param $redirect
 *   Path to redirect to after all jobs have been checked out.
 *
 * @return string
 */
function tmgmt_ui_job_checkout_multiple($jobs = array(), $quick = TRUE, $redirect = NULL) {
  // We only need to proceed with the quick checkout procedure if it is enabled.
  if (variable_get('tmgmt_quick_checkout', TRUE)) {
    $errors = FALSE;
    $count = 0;
    foreach ($jobs as $job) {
      if (!tmgmt_ui_job_needs_checkout_form($job)) {
        if (tmgmt_ui_job_request_translation($job)) {
          // If a job doesn't need a checkout form and the translation request was
          // submitted successfully remove it from the to-do list.
          unset($job);
        }
        else {
          // If, however, something went wrong during the translation request we
          // will want to display an error on the next page and present this job
          // in the following checkout (multistep) form.
          $errors = TRUE;
        }
      }
    }
    // If one or more of the previous 'quick checkout' jobs failed, print an
    // short notice to the screen.
    if ($errors) {
      drupal_set_message(t('At least one of the provided translation jobs could not be successfully translated in the quick checkout process and have been added to the checkout queue.'), 'warning');
    }
  }
  // @todo Now we just need the multistep form right here :).
}

/**
 * Check if a job needs a checkout form.
 *
 * The current checks include if there is more than one translator available,
 * if he has settings and if the job has a fixed target language.
 *
 * @return
 *   TRUE if the job needs a checkout form.
 */
function tmgmt_ui_job_needs_checkout_form(TMGMTJob $job) {
  // If quick checkout is disabled, always show the checkout form.
  if (!variable_get('tmgmt_quick_checkout', TRUE)) {
    return TRUE;
  }
  // If the job has no target language (or source language, even though this
  // should never be the case in our use case), checkout is mandatory.
  if (empty($job->target_language) || empty($job->source_language)) {
    return TRUE;
  }
  // If there is more than a single translator available or if there are no
  // translators available at all checkout is mandatory.
  $translators = tmgmt_translator_load_available($job->source_language, $job->target_language);
  if (empty($translators) || count($translators) > 1) {
    return TRUE;
  }
  $translator = reset($translators);
  $job->translator = $translator->name;
  // If that translator has settings, the checkout is mandatory.
  if ($translator->hasCheckoutSettings($job)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Requests translations for a job and prints messages which have happened since
 * then.
 *
 * @param TMGMTJob $job
 *   The job object for which translations should be requested.
 *
 * @return
 *   TRUE if it worked, FALSE if there were any errors of the type error which
 *   means that something did go wrong.
 */
function tmgmt_ui_job_request_translation(TMGMTJob $job) {
  // Process the translation request.
  $job->requestTranslation();
  // Print all messages that occurred since our request to the screen.
  $errors = FALSE;
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->type == 'debug') {
      continue;
    }
    if ($message->type == 'error') {
      $errors = TRUE;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(filter_xss($text), $message->type);
    }
  }
  return !$errors;
}

/**
 * Form wrapper callback for the job item review form.
 *
 * @see tmgmt_ui_forms()
 */
function tmgmt_ui_translation_review_form_defaults($form, &$form_state, TMGMTJobItem $item) {
  // We store the item in the root of the form state so we can easily access it
  // in all the form functions.
  $form_state['item'] = $item;;
  // Add the form actions as well.
  $form['actions']['#type'] = 'actions';
  $form['actions']['accept'] = array(
    '#type' => 'submit',
    '#value' => t('Accept'),
  );
  $form['actions']['reject'] = array(
    '#type' => 'submit',
    '#value' => t('Reject'),
  );
  return $form;
}

/**
 * Form callback for the job item review form.
 *
 * @see tmgmt_ui_forms()
 */
function tmgmt_ui_translation_review_form($form, &$form_state, TMGMTJobItem $item) {
  if ($source = $item->getSourceController()) {
    if ($translator = $item->getTranslatorController()) {
      // The basic review form gets built by the source controller.
      $form = $source->reviewForm($form, $form_state, $item);
      // After that, the translator controller may append additional form fields.
      // This way, the translator controller can append per-text comment fields for
      // for example.
      $form = $translator->reviewForm($form, $form_state, $item);
      return $form;
    }
  }
}

/**
 * Validation callback for the job item review form.
 */
function tmgmt_ui_translation_review_form_validate($form, &$form_state) {
  $item = $form_state['item'];
  // First invoke the validation method on the source controller.
  $source = $item->getSourceController();
  $source->reviewFormValidate($form, $form_state, $item);
  // Then invoke the validation method on the source controller.
  $translator = $item->getTranslatorController();
  $translator->reviewFormValidate($form, $form_state, $item);
}

/**
 * Submit callback for the job item review form.
 */
function tmgmt_ui_translation_review_form_submit($form, &$form_state) {
  $item = $form_state['item'];
  // First invoke the validation method on the source controller.
  $source = $item->getSourceController();
  $source->reviewFormSubmit($form, $form_state, $item);
  // Then invoke the validation method on the source controller.
  $translator = $item->getTranslatorController();
  $translator->reviewFormSubmit($form, $form_state, $item);
  // Submit the entity.
  $item->data = $form_state['values']['data'];
}
