<?php

/**
 * @file
 * Common Translation managment UI.
 */

/**
 * Implements hook_menu().
 */
function tmgmt_ui_entity_info() {
  $info['tmgmt_translator'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTTranslatorUIController',
      'path' => 'admin/tmgmt/translators',
      'file' => 'includes/tmgmt_ui.admin.inc',
      // Entity API defaults to the path that implements the entity type, but
      // since this happens in the TMGMT core module, we need to manually
      // define the path here.
      'file path' => drupal_get_path('module', 'tmgmt_ui'),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function tmgmt_ui_menu() {
  $items['admin/tmgmt'] = array(
    'title' => 'Translation Management',
    'description' => 'Use the Translation Management',
    'page callback' => 'tmgmt_ui_content',
    'access arguments' => array('access tmgmt ui'),
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/tmgmt/my-translation-management'] = array(
    'title' => 'Overview',
    'page callback' => 'tmgmt_ui_content',
    'access arguments' => array('access tmgmt ui'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/tmgmt/jobs/%tmgmt_job'] = array(
    'title' => 'Job',
    'page callback' => 'tmgmt_job_view',
    'page arguments' => array(3),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/tmgmt/checkout/%tmgmt_ui_job_multiple'] = array(
    'title' => 'Checkout job',
    'page callback' => 'tmgmt_ui_checkout_wizard',
    'page arguments' => array(3),
    'access arguments' => array('access tmgmt ui'),
    'file' => 'includes/tmgmt_ui.pages.inc',
  );
  $items['admin/tmgmt/add-item/%/%/%/%'] = array(
    'title' => 'Create a Job',
    'page callback' => 'tmgmt_job_add_item',
    'page arguments' => array(3, 4, 5, 6),
    'access arguments' => array('access tmgmt ui'),
    'file' => 'includes/tmgmt_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/tmgmt/add-item/%/%/%/%/%tmgmt_job'] = array(
    'title' => 'Add to existing Job',
    'page callback' => 'tmgmt_job_add_item',
    'page arguments' => array(3, 4, 5, 6, 7),
    'access arguments' => array('access tmgmt ui'),
    'file' => 'includes/tmgmt_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // Add source overview pages.
  foreach (tmgmt_source_plugin_info() as $plugin_type => $info) {
    $plugin = tmgmt_source_plugin_controller($plugin_type);
    $items = array_merge($items, $plugin->hook_menu());
  }
  // If we have any menu item then lets add root item also.
  $items['admin/config/regional/tmgmt'] = array(
    'title' => 'Translation Management',
    'description' => 'Translation Management Suite.',
    'access arguments' => array('administer tmgmt'),
  );
  $items['admin/config/regional/tmgmt/plugins'] = array(
    'title' => 'Plugin settings',
    'description' => 'Configuration options for the available source and translator plugins.',
    'access arguments' => array('administer tmgmt'),
  );
  // Add settings menu item for each plugin that is using settings form.
  foreach (tmgmt_translator_plugin_info() as $plugin => $plugin_info) {
    $items += tmgmt_translator_plugin_controller($plugin)->hook_menu();
  }
  return $items;
}

/**
 * Implements hook_forms().
 */
function tmgmt_ui_forms() {
  $info = array();
  // Give each translator settings form a unique form id.
  foreach (tmgmt_translator_plugin_info() as $plugin => $plugin_info) {
    $info['tmgmt_' . $plugin . '_translator_settings_form'] = array(
      'callback' => 'tmgmt_translator_settings_form',
      'wrapper_callback' => 'tmgmt_translator_settings_form_defaults',
    );
  }
  return $info;
}

/**
 * Implements hook_permission().
 */
function tmgmt_ui_permission() {
  return array(
    'access tmgmt ui' => array(
      'title' => t('Access Translation Management UI'),
    ),
  );
}

/**
 * Load callback to load multiple jobs.
 *
 * @todo: This function can be easily tested.
 *
 * @param string $job_ids
 *   A string which has a comma-separeted list of job ids.
 *
 * @return array
 */
function tmgmt_ui_job_multiple_load($job_ids) {
  $job_ids = explode(',', $job_ids);
  $jobs = tmgmt_job_load_multiple($job_ids);
  return $jobs;
}

/**
 * Implements hook_views_api().
 */
function tmgmt_ui_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_ui_views_default_views() {
  return _tmgmt_ui_load_all_exports('tmgmt_ui', 'views', 'view.inc', 'view');
}

/**
 * Fetches an array of exportables from files.
 *
 * @param $module
 *   The module invoking this request. (Can be called by other modules.)
 * @param $directory
 *   The subdirectory in the custom module.
 * @param $extension
 *   The file extension.
 * @param $name
 *   The name of the variable found in each file. Defaults to the same as
 *   $extension.
 *
 * @return array
 *   Array of $name objects.
 */
function _tmgmt_ui_load_all_exports($module, $directory, $extension, $name = NULL) {
  if (!$name) {
    $name = $extension;
  }
  $return = array();
  // Find all the files in the directory with the correct extension.
  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/\.{$extension}$/");
  foreach ($files as $path => $file) {
    require DRUPAL_ROOT . '/' . $path;
    if (isset($name)) {
      $return[$$name->name] = $$name;
    }
  }
  return $return;
}
