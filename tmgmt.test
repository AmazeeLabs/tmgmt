<?php

/*
 * @file
 * Contains tests for Translation management
 */

/**
 * Base class for tests.
 */
class TMGMTBaseTestCase extends DrupalWebTestCase {

  /**
   * Creates, saves and returns a translator.
   *
   * @return TMGMTTranslator
   */
  function createTranslator() {
    $translator = new TMGMTTranslator();
    $translator->name = $this->randomName();
    $translator->label = $this->randomString();
    $translator->translator_plugin = 'test_translator';
    $translator->settings = array(
      'key' => $this->randomName(),
      'another_key' => $this->randomName(),
    );
    $this->assertEqual(SAVED_NEW, $translator->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($translator->tid > 0);
    return $translator;
  }

  /**
   * Creates, saves and returns a translation job.
   *
   * @return TMGMTJob
   */
  function createJob() {
    $job = tmgmt_job_create('en', 'de');

    $this->assertEqual(SAVED_NEW, $job->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($job->tjid > 0);
    return $job;
  }
}

/**
 * Basic CRUD tests.
 */
class TMGMTCRUDTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('CRUD tests'),
      'description' => t('Basic crud operations for jobs and translators'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('entity', 'tmgmt'));
  }

  /**
   * Test crud operations of translators.
   */
  function testTranslators() {
    $translator = $this->createTranslator();

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Update the settings.
    $translator->settings['new_key'] = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $translator->save());

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Delete the translator, make sure the translator is gone.
    $translator->delete();
    $this->assertFalse(tmgmt_translator_load($translator->tid));
  }

  /**
   * Test crud operations of jobs.
   */
  function testJobs() {
    $job = $this->createJob();

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->source_language, $loaded_job->source_language);
    $this->assertEqual($job->target_language, $loaded_job->target_language);

    // Assert that the created and changed information has been set to the
    // default value.
    $this->assertTrue($loaded_job->created > 0);
    $this->assertTrue($loaded_job->changed > 0);
    $this->assertEqual(0, $loaded_job->state);

    // Update the settings.
    $job->translator_id = 7;
    $this->assertEqual(SAVED_UPDATED, $job->save());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->translator_id, $loaded_job->translator_id);

    // Test the job items.
    $item1 = tmgmt_job_item_create('plugin', 'type', 5);
    $item2 = tmgmt_job_item_create('plugin', 'type', 4);
    $job->addItem($item1);
    $job->addItem($item2);

    // Load and compare the items.
    $items = $job->getItems();
    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->source_plugin, $items[$item1->tjiid]->source_plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->source_plugin, $items[$item2->tjiid]->source_plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);

    // Delete the translator, make sure the translator is gone.
    $job->delete();
    $this->assertFalse(tmgmt_job_load($job->tjid));
  }
}


/**
 * Basic CRUD tests.
 */
class TMGMTPluginsTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Plugin tests'),
      'description' => t('Verifies basic functionality of source and translator plugins'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('entity', 'tmgmt', 'tmgmt_test'));
  }

  function createJob($action = 'translate') {
    $job = tmgmt_job_create('en', 'de');

    for ($i = 1; $i < 3; $i++) {
      $item = tmgmt_job_item_create('test_source', 'test', $i);

      // Explicitly define the data for the third item.
      if ($i == 3) {
        $item->data = array(
          'dummy' => array(
            'deep_nesting' => array(
              '#text' => 'Stored data',
            ),
          ),
        );
      }

      $job->addItem($item);
    }

    // Manually specify the translator for now.
    $job->translator = 'test_translator';
    $job->translator_context = array('action' => $action);

    $job->prepared();
    $job->save();

    return $job;
  }

  function testBasicWorkflow() {

    // Submit a translation job.
    $submit_job = $this->createJob('submit');
    $submit_job->requestTranslation();

    $submit_job = tmgmt_job_load($submit_job->tjid);
    $this->assertTrue($submit_job->isSubmitted());

    // Translate a job.
    $translate_job = $this->createJob('translate');
    $translate_job->requestTranslation();

    $translate_job = tmgmt_job_load($translate_job->tjid);
    $this->assertTrue($translate_job->isNeedsReview());

    $i = 1;
    foreach ($translate_job->getItems() as $item) {
      // Check the translated text.
      if ($i != 3) {
        $expected_text = 'de_Text for job item with type ' . $item->item_type . ' and id ' . $item->item_id . '.';
      }
      else {
        // The third item has an explicitly stored data value.
        $expected_text = 'de_Stored data';
      }
      $this->assertEqual($expected_text, $item->translated_data['dummy']['deep_nesting']['#text']);
      $i++;
    }

    $translate_job->accepted(t('Job accepted'));

    // Check if the translations have been "saved".
    foreach ($translate_job->getItems() as $item) {
      $this->assertTrue(variable_get('tmgmt_test_saved_translation_' . $item->item_type . '_' . $item->item_id, FALSE));
    }

    // A rejected job.
    $reject_job = $this->createJob('reject');
    $reject_job->requestTranslation();
    $this->assertTrue($reject_job->isRejected());
    $messages = $reject_job->getMessages();
    debug($messages);

    // A failing job.
    $failing_job = $this->createJob('fail');
    $failing_job->requestTranslation();
    // Still prepared.
    $this->assertTrue($failing_job->isPrepared());
    $messages = $reject_job->getMessages();
    debug($messages);
  }
}
