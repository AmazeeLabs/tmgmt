<?php

/*
 * @file
 * Contains tests for Translation management
 */

/**
 * Base class for tests.
 */
class TranslationManagementBaseTestCase extends DrupalWebTestCase {

  /**
   * Creates, saves and returns a translator.
   *
   * @return TranslationManagementTranslator
   */
  function createTranslator() {
    $translator = new TranslationManagementTranslator();
    $translator->name = $this->randomName();
    $translator->label = $this->randomString();
    $translator->settings = array(
      'key' => $this->randomName(),
      'another_key' => $this->randomName(),
    );
    $this->assertEqual(SAVED_NEW, $translator->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($translator->tid > 0);
    return $translator;
  }

  /**
   * Creates, saves and returns a translation map.
   *
   * @return TranslationManagementMap
   */
  function createMap() {
    $map = new TranslationManagementMap();
    $map->plugin = $this->randomName();
    $map->item_type = $this->randomName();
    $map->item_id = 5;
    $this->assertEqual(SAVED_NEW, $map->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($map->tmid > 0);
    return $map;
  }

  /**
   * Creates, saves and returns a translation job.
   *
   * @return TranslationManagementJob
   */
  function createJob(TranslationManagementMap $map) {
    $job = new TranslationManagementJob();
    $job->tmid = $map->tmid;
    $job->source_language = 'en';
    $job->target_language = 'de';
    $job->data = array(
      'title' => array(
        '#text' => $this->randomString(),
        '#label' => $this->randomString(),
        '#translate' => TRUE,
      ),
      'field_body' => array(
        0 => array(
          '#text' => $this->randomString(),
          '#label' => $this->randomString(),
          '#translate' => FALSE,
          '#comment' => $this->randomString(),
        ),
      ),
      'field_collection' => array(
        0 => array(
          'field_whatever' => array(
            0 => array(
              '#text' => $this->randomString(),
              '#label' => $this->randomString(),
              '#translate' => TRUE,
            ),
          ),
        ),
      ),
    );

    $this->assertEqual(SAVED_NEW, $job->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($job->tjid > 0);
    return $job;
  }
}

/**
 * Basic CRUD tests.
 */
class TranslationManagementCRUDTestCase extends TranslationManagementBaseTestCase {

  /**
   * Implement getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('CRUD tests'),
      'description' => t('Basic crud operations for maps, jobs and translators'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('entity', 'tmgmt'));
  }

  /**
   * Test crud operations of translators.
   */
  function testTranslators() {
    $translator = $this->createTranslator();

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Update the settings.
    $translator->settings['new_key'] = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $translator->save());

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Delete the translator, make sure the translator is gone.
    $translator->delete();
    $this->assertFalse(tmgmt_translator_load($translator->tid));
  }

  /**
   * Test crud operations of maps.
   */
  function testMaps() {
    $map = $this->createMap();

    $loaded_map = tmgmt_map_load($map->tmid);

    $this->assertEqual($map->plugin, $loaded_map->plugin);
    $this->assertEqual($map->item_type, $loaded_map->item_type);
    $this->assertEqual($map->item_id, $loaded_map->item_id);

    // Update the settings.
    $map->item_id = 6;
    $this->assertEqual(SAVED_UPDATED, $map->save());

    $loaded_map = tmgmt_map_load($map->tmid);

    $this->assertEqual($map->plugin, $loaded_map->plugin);
    $this->assertEqual($map->item_type, $loaded_map->item_type);
    $this->assertEqual($map->item_id, $loaded_map->item_id);


    // Get the map.
    $loaded_map = tmgmt_map_get($map->plugin, $map->item_type, $map->item_id);
    $this->assertEqual($map->tmid, $loaded_map->tmid);

    // Get a non-existing map without autocreation.
    $this->assertFalse(tmgmt_map_get('nonexisting', 'none', 5));

    // Get a non-existing map with autocreation.
    $new_map = tmgmt_map_get('plugin', 'type', 3, TRUE);
    $this->assertTrue($new_map->tmid > 0);
    $this->assertEqual('plugin', $new_map->plugin);
    $this->assertEqual('type', $new_map->item_type);
    $this->assertEqual('3', $new_map->item_id);

    // Delete the translator, make sure the translator is gone.
    $map->delete();
    $this->assertFalse(tmgmt_map_load($map->tmid));
  }

  /**
   * Test crud operations of maps.
   */
  function testJobs() {
    $job = $this->createJob($this->createMap());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->tmid, $loaded_job->tmid);
    $this->assertEqual($job->source_language, $loaded_job->source_language);
    $this->assertEqual($job->target_language, $loaded_job->target_language);
    $this->assertEqual($job->data, $loaded_job->data);

    // Assert that the created and changed information has been set to the
    // default value.
    $this->assertTrue($loaded_job->created > 0);
    $this->assertTrue($loaded_job->changed > 0);
    $this->assertEqual(0, $loaded_job->state);

    // Update the settings.
    $job->response = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $job->save());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->response, $loaded_job->response);

    // Delete the translator, make sure the translator is gone.
    $job->delete();
    $this->assertFalse(tmgmt_job_load($job->tjid));
  }
}
