<?php

/*
 * @file
 * Contains tests for Translation management
 */

/**
 * Base class for tests.
 */
class TMGMTBaseTestCase extends DrupalWebTestCase {

  /**
   * Creates, saves and returns a translator.
   *
   * @return TMGMTTranslator
   */
  function createTranslator() {
    $translator = new TMGMTTranslator();
    $translator->name = $this->randomName();
    $translator->label = $this->randomString();
    $translator->translator_plugin = 'test_translator';
    $translator->settings = array(
      'key' => $this->randomName(),
      'another_key' => $this->randomName(),
    );
    $this->assertEqual(SAVED_NEW, $translator->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($translator->tid > 0);
    return $translator;
  }

  /**
   * Creates, saves and returns a translation job.
   *
   * @return TMGMTJob
   */
  function createJob() {
    $job = tmgmt_job_create('en', 'de');

    $this->assertEqual(SAVED_NEW, $job->save());

    // Assert that the translater was assigned a tid.
    $this->assertTrue($job->tjid > 0);
    return $job;
  }
}

/**
 * Basic CRUD tests.
 */
class TMGMTCRUDTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('CRUD tests'),
      'description' => t('Basic crud operations for jobs and translators'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('entity', 'tmgmt'));
  }

  /**
   * Test crud operations of translators.
   */
  function testTranslators() {
    $translator = $this->createTranslator();

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Update the settings.
    $translator->settings['new_key'] = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $translator->save());

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Delete the translator, make sure the translator is gone.
    $translator->delete();
    $this->assertFalse(tmgmt_translator_load($translator->tid));
  }

  /**
   * Test crud operations of jobs.
   */
  function testJobs() {
    $job = $this->createJob();

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->source_language, $loaded_job->source_language);
    $this->assertEqual($job->target_language, $loaded_job->target_language);

    // Assert that the created and changed information has been set to the
    // default value.
    $this->assertTrue($loaded_job->created > 0);
    $this->assertTrue($loaded_job->changed > 0);
    $this->assertEqual(0, $loaded_job->state);

    // Update the settings.
    $job->translator_id = 7;
    $this->assertEqual(SAVED_UPDATED, $job->save());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->translator_id, $loaded_job->translator_id);

    // Test the job items.
    $item1 = tmgmt_job_item_create('plugin', 'type', 5);
    $item2 = tmgmt_job_item_create('plugin', 'type', 4);
    $job->addItem($item1);
    $job->addItem($item2);

    // Load and compare the items.
    $items = $job->getItems();
    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->source_plugin, $items[$item1->tjiid]->source_plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->source_plugin, $items[$item2->tjiid]->source_plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);

    // Delete the translator, make sure the translator is gone.
    $job->delete();
    $this->assertFalse(tmgmt_job_load($job->tjid));
  }
}


/**
 * Basic CRUD tests.
 */
class TMGMTPluginsTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Plugin tests'),
      'description' => t('Verifies basic functionality of source and translator plugins'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('entity', 'tmgmt', 'tmgmt_test'));
  }

  function testBasicWorkflow() {

    // Trigger a translation job into german.
    $de_job = tmgmt_test_trigger_job('de');
    $de_job->requestTranslation();

    $de_job = tmgmt_job_load($de_job->tjid);
    $this->assertTrue($de_job->isSubmitted());

    // Trigger a translation job into spanish.
    $es_job = tmgmt_test_trigger_job('es');
    $es_job->requestTranslation();

    $es_job = tmgmt_job_load($es_job->tjid);
    $this->assertTrue($es_job->isNeedsReview());

    foreach ($es_job->getItems() as $item) {
      // Check the translated text.
      $expected_text = 'es_Text for job item with type ' . $item->item_type . ' and id ' . $item->item_id . '.';
      $this->assertEqual($expected_text, $item->translated_data['dummy']['deep_nesting']['#text']);
    }

    $es_job->setStateFromResponse(new TMGMTTranslatorResponse(TMGMTJob::STATE_ACCEPTED, t('Job accepted')));
    $es_job->propagateTranslatedData();

    // Check if the translations have been "saved".
    foreach ($es_job->getItems() as $item) {
      $this->assertTrue(variable_get('tmgmt_test_saved_translation_' . $item->item_type . '_' . $item->item_id, FALSE));
    }

    // Trigger a translation job into italian.
    $it_job = tmgmt_test_trigger_job('it');
    $it_job->requestTranslation();
    $this->assertTrue($it_job->isRejected());
    //$last_response = end($it_job->response);
    //$this->assertEqual(t('Translation into italian not supported'), reset($last_response));

    // Trigger a translation job into chinese.
    $zh_job = tmgmt_test_trigger_job('zh-hans');
    $zh_job->requestTranslation();
    // Still prepared.
    $this->assertTrue($zh_job->isPrepared());
  }
}
